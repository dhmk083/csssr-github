{"total_count":33546,"incomplete_results":false,"items":[{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48949","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48949/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48949/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48949/events","html_url":"https://github.com/microsoft/TypeScript/issues/48949","id":1225131321,"node_id":"I_kwDOAT9aAc5JBgU5","number":48949,"title":"'window.location' should allow assigning a string","user":{"login":"fcole90","id":1292230,"node_id":"MDQ6VXNlcjEyOTIyMzA=","avatar_url":"https://avatars.githubusercontent.com/u/1292230?v=4","gravatar_id":"","url":"https://api.github.com/users/fcole90","html_url":"https://github.com/fcole90","followers_url":"https://api.github.com/users/fcole90/followers","following_url":"https://api.github.com/users/fcole90/following{/other_user}","gists_url":"https://api.github.com/users/fcole90/gists{/gist_id}","starred_url":"https://api.github.com/users/fcole90/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fcole90/subscriptions","organizations_url":"https://api.github.com/users/fcole90/orgs","repos_url":"https://api.github.com/users/fcole90/repos","events_url":"https://api.github.com/users/fcole90/events{/privacy}","received_events_url":"https://api.github.com/users/fcole90/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-05-04T09:31:41Z","updated_at":"2022-05-04T10:15:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"# Bug Report\r\n\r\n### üîé Search Terms\r\n`window.location`, `location.href`\r\n\r\n### üïó Version & Regression Information\r\n\r\n- No version has the behaviour I'd expect, however up to version 4.5.5 `windows.location` is of type `Location`, while from version 4.6.2 is of type `(string | Location) & Location`. FAQ do not mention anything about it.\r\n\r\n### ‚èØ Playground Link\r\n[Playground link with relevant code](https://www.typescriptlang.org/play?ts=4.7.0-dev.20220504#code/O4SwdgJg9sB0A2UDGBDALiKYAEBebARABZpoAOAzgFwD0NA5iGkQK4BGsSUAtjQQNxA)\r\n\r\n### üíª Code\r\n\r\n```ts\r\nwindow.location = \"https://github.com/\";\r\n```\r\n\r\n### üôÅ Actual behavior\r\n```ts\r\nwindow.location = \"https://github.com/\";\r\n// (property) location: (string | Location) & Location\r\n// Type 'string' is not assignable to type '(string | Location) & Location'.(2322)\r\n```\r\nWhile it's true that `Location` is an object and not a string, assigning a string to it is a long-established and recommended pattern, that may produce a different result from `window.location.href = \"https://github.com/\";`.\r\n\r\nExample of where assigning a string to `window.location` is the correct behaviour: https://javascript.info/cross-window-communication#4q5rssu5ys\r\n\r\nAlso, according to MDN:\r\n\r\n> Though `Window.location` is a *read-only* `Location` object, you can also assign a [DOMString](https://developer.mozilla.org/en-US/docs/Web/API/DOMString) to it. This means that you can work with `location` as if it were a `string` in most cases: `location = 'http://www.example.com'` is a synonym of `location.href = 'http://www.example.com'`.\r\n\r\nFurther discussion on difference between assigning to `location` or to `location.href`: https://stackoverflow.com/questions/2383401/javascript-setting-location-href-versus-location\r\n\r\n### üôÇ Expected behavior\r\n```ts\r\nwindow.location = \"https://github.com/\";\r\n// (property) location: string | Location\r\n// No error\r\n```\r\n[Mock playground](https://www.typescriptlang.org/play?ts=4.7.0-dev.20220504#code/MYewdgzgLgBGCmB3A6gSzAExIgXDA3gDYjACGUq4e0ATugOYwA+MAMieZWAL4wC8BGMTIUqMROiyIAdMM7gY3ANwAoFQhSTssjqLD8YAIgAWUKAAcIOAPTX6qKMYCuAI2mgAttcNKgA)\r\n\r\nI could not find the rationale behind the change that happened between 4.5.5 and 4.6.2, that changed its type from `Location` to `(string | Location) & Location`, but I wonder if the intended result was the same I'm expecting here.\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48949/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48949/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48948","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48948/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48948/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48948/events","html_url":"https://github.com/microsoft/TypeScript/issues/48948","id":1225112914,"node_id":"I_kwDOAT9aAc5JBb1S","number":48948,"title":"`constructor` can't be the name of class accessors and generators.","user":{"login":"g-plane","id":17216317,"node_id":"MDQ6VXNlcjE3MjE2MzE3","avatar_url":"https://avatars.githubusercontent.com/u/17216317?v=4","gravatar_id":"","url":"https://api.github.com/users/g-plane","html_url":"https://github.com/g-plane","followers_url":"https://api.github.com/users/g-plane/followers","following_url":"https://api.github.com/users/g-plane/following{/other_user}","gists_url":"https://api.github.com/users/g-plane/gists{/gist_id}","starred_url":"https://api.github.com/users/g-plane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/g-plane/subscriptions","organizations_url":"https://api.github.com/users/g-plane/orgs","repos_url":"https://api.github.com/users/g-plane/repos","events_url":"https://api.github.com/users/g-plane/events{/privacy}","received_events_url":"https://api.github.com/users/g-plane/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-05-04T09:13:21Z","updated_at":"2022-05-04T09:13:21Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"# Bug Report\r\n\r\nIn classes, accessors (aka getters/setters) and generators can't be named with `constructor`. They're *Syntax Errors* defined in spec.\r\n\r\nReferences:\r\n\r\n- [Early errors of class definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-class-definitions-static-semantics-early-errors). Please focus on the second point of the `MethodDefinition` section.\r\n- Class accessors and generators are [SpecialMethod](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-static-semantics-specialmethod)s.\r\n\r\n### üîé Search Terms\r\n\r\nconstructor\r\ngetter\r\nsetter\r\naccessor\r\ngenerator\r\n\r\n### üïó Version & Regression Information\r\n\r\nTested on 4.5.5, 4.6.2 and Nightly (4.7).\r\n\r\n### ‚èØ Playground Link\r\n\r\n[Playground link with relevant code](https://www.typescriptlang.org/play?target=99&ts=4.7.0-dev.20220504#code/MYGwhgzhAEDCCM0DeAoa7oHMCmAXawA9gHYS4BOArsLoeQBQCUyaGb5el5xr6Avr2gQ8BEmSo069AG5gQlbMyQCBKUJBiwATCzYAqIqQrVaDJSqA)\r\n\r\n### üíª Code\r\n\r\n```ts\r\nclass C1 {\r\n    get constructor() {\r\n        return\r\n    }\r\n    set constructor(value) {}\r\n}\r\n\r\nclass C2 {\r\n    *constructor() {}\r\n}\r\n```\r\n\r\n### üôÅ Actual behavior\r\n\r\nNo errors reported.\r\n\r\n### üôÇ Expected behavior\r\n\r\nTypeScript should report errors for misusing `constructor` as accessor name for Line 2 and Line 5, and report error for misusing `constructor` as generator for Line 9 in the example above.\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48948/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48948/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48947","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48947/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48947/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48947/events","html_url":"https://github.com/microsoft/TypeScript/issues/48947","id":1224982851,"node_id":"I_kwDOAT9aAc5JA8FD","number":48947,"title":"Update typescript from 4.2.4 to 4.6.4,get error","user":{"login":"keyiis","id":7766085,"node_id":"MDQ6VXNlcjc3NjYwODU=","avatar_url":"https://avatars.githubusercontent.com/u/7766085?v=4","gravatar_id":"","url":"https://api.github.com/users/keyiis","html_url":"https://github.com/keyiis","followers_url":"https://api.github.com/users/keyiis/followers","following_url":"https://api.github.com/users/keyiis/following{/other_user}","gists_url":"https://api.github.com/users/keyiis/gists{/gist_id}","starred_url":"https://api.github.com/users/keyiis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/keyiis/subscriptions","organizations_url":"https://api.github.com/users/keyiis/orgs","repos_url":"https://api.github.com/users/keyiis/repos","events_url":"https://api.github.com/users/keyiis/events{/privacy}","received_events_url":"https://api.github.com/users/keyiis/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-05-04T06:47:55Z","updated_at":"2022-05-04T07:21:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When I update typescript from 4.2.4 to 4.6.4,I get error\r\n```\r\nD:/douyin/src/index.ts(1,15): error TS6059: File 'D:/douyin/common/index.ts' is not under 'rootDir' . 'rootDir' is expected to contain all source files.\r\n```\r\nIf I downgrade owngrade typescript to 4.2.4,it works. Therefore, the new version of typescript must have made some adjustments, which led to the problem„ÄÇI used `gulp-typescript` to build my app,below is directory structure\r\n```\r\nd:/douyin\r\n---src\r\n    ---index.ts\r\n---common\r\n    ---index.ts\r\n---tsconfig.json\r\n---gulp.js\r\n```\r\n**tsconfig.json**\r\n```\r\n{\r\n    \"compilerOptions\": {\r\n        \"target\": \"es6\",\r\n        \"module\": \"commonjs\",\r\n        \"moduleResolution\": \"node\",\r\n        \"experimentalDecorators\": true,\r\n        \"emitDecoratorMetadata\": true,\r\n        \"removeComments\": true,\r\n        \"skipLibCheck\":true,\r\n        \"sourceMap\": true,\r\n        \"declaration\": false,\r\n        \"pretty\": true,\r\n        \"lib\": [\r\n            \"es2015\",\r\n            \"es2016\",\r\n            \"es2017\"\r\n        ],\r\n        \"baseUrl\": \".\",\r\n        \"paths\": {\r\n            \"@common/*\": [ \"src/common/*\" ]\r\n        }\r\n    }\r\n}\r\n```\r\n**src/index.ts**\r\n```\r\nimport {a} from '@common';\r\n...\r\n```\r\ngulp.js\r\n```\r\nconst PROJECT_PATH='D:/douyin/src',DIST_PATH='D:/douyin/dist';\r\ngulp.src([`${PROJECT_PATH}/**/*.ts`], { base: `${PROJECT_PATH}` }).pipe(tsProject()).pipe(gulp.dest(DIST_PATH));","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48947/reactions","total_count":1,"+1":0,"-1":1,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48947/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48944","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48944/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48944/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48944/events","html_url":"https://github.com/microsoft/TypeScript/issues/48944","id":1224731816,"node_id":"I_kwDOAT9aAc5I_-yo","number":48944,"title":"ECMAScript private member support in Constructor Parameter Properties","user":{"login":"kfrancois","id":17174086,"node_id":"MDQ6VXNlcjE3MTc0MDg2","avatar_url":"https://avatars.githubusercontent.com/u/17174086?v=4","gravatar_id":"","url":"https://api.github.com/users/kfrancois","html_url":"https://github.com/kfrancois","followers_url":"https://api.github.com/users/kfrancois/followers","following_url":"https://api.github.com/users/kfrancois/following{/other_user}","gists_url":"https://api.github.com/users/kfrancois/gists{/gist_id}","starred_url":"https://api.github.com/users/kfrancois/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kfrancois/subscriptions","organizations_url":"https://api.github.com/users/kfrancois/orgs","repos_url":"https://api.github.com/users/kfrancois/repos","events_url":"https://api.github.com/users/kfrancois/events{/privacy}","received_events_url":"https://api.github.com/users/kfrancois/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-05-03T22:29:17Z","updated_at":"2022-05-03T22:36:20Z","closed_at":"2022-05-03T22:36:19Z","author_association":"NONE","active_lock_reason":null,"body":"# Suggestion\r\n\r\nWhen moving fields declared as Parameter Properties from the `private` access modifier to the `#` prefix, we should be able to do this in the constructor\r\n\r\n**`private` example**\r\n```ts\r\nclass Person {\r\n  constructor(private name: string) { }\r\n\r\n  sayHello() {\r\n    return `Hello from ${this.name}!`;\r\n  }\r\n}\r\n```\r\n\r\n**`#` example, today**\r\n```ts\r\nclass Person {\r\n  #name: string\r\n\r\n  constructor(name: string) {\r\n    this.#name = name\r\n  }\r\n\r\n  sayHello() {\r\n    return `Hello from ${this.#name}!`;\r\n  }\r\n}\r\n```\r\n\r\n**`#` example, suggested**\r\n```ts\r\nclass Person {\r\n  constructor(#name: string) { }\r\n\r\n  sayHello() {\r\n    return `Hello from ${this.#name}!`;\r\n  }\r\n}\r\n```\r\n\r\n## üîç Search Terms\r\n\r\n<!--\r\n  üí° Did you know? TypeScript has over 2,000 open suggestions!\r\n  üîé Please search thoroughly before logging new feature requests as most common ideas already have a proposal in progress.\r\n  The \"Common Feature Requests\" section of the FAQ lists many popular requests: https://github.com/Microsoft/TypeScript/wiki/FAQ#common-feature-requests\r\n\r\n  Replace the text below:\r\n-->\r\n\r\nconstructor, private, parameter properties, class, members, fields, hash names\r\n\r\n## ‚úÖ Viability Checklist\r\n\r\n<!--\r\n   Suggestions that don't meet all these criteria are very, very unlikely to be accepted.\r\n   We always recommend reviewing the TypeScript design goals before investing time writing\r\n   a proposal for ideas outside the scope of the project.\r\n-->\r\nMy suggestion meets these guidelines:\r\n\r\n* [X] This wouldn't be a breaking change in existing TypeScript/JavaScript code\r\n* [X] This wouldn't change the runtime behavior of existing JavaScript code\r\n* [X] This could be implemented without emitting different JS based on the types of the expressions\r\n* [X] This isn't a runtime feature (e.g. library functionality, non-ECMAScript syntax with JavaScript output, new syntax sugar for JS, etc.)\r\n* [X] This feature would agree with the rest of [TypeScript's Design Goals](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals).\r\n\r\n\r\n## ‚≠ê Suggestion\r\n\r\nSee examples above. I would like to see [ECMAScript private members](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields) to be supported in TypeScript's Parameter Properties syntax.\r\n\r\n## üìÉ Motivating Example\r\n\r\n<!--\r\n  If you were announcing this feature in a blog post, what's a short explanation that shows\r\n  a developer why this feature improves the language?\r\n-->\r\n\r\nThe `#` class member prefix can be used in TypeScript, and serves as a superior alternative to TypeScript's `private` modifier which doesn't have runtime impact.\r\n\r\nTo promote adoption in TS codebases, the widely used syntax mentioned above should be easily replaceable without impacting readability or creating more code while developers are already used to using Parameter Properties.\r\n\r\n## üíª Use Cases\r\n\r\n<!--\r\n  What do you want to use this for?\r\n  What shortcomings exist with current approaches?\r\n  What workarounds are you using in the meantime?\r\n-->\r\n\r\nSee examples above.","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48944/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48944/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48937","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48937/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48937/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48937/events","html_url":"https://github.com/microsoft/TypeScript/issues/48937","id":1224337113,"node_id":"I_kwDOAT9aAc5I-ebZ","number":48937,"title":"feat(): compile-ts-from-js-and-annotations-and-declarations","user":{"login":"frank-dspeed","id":7239575,"node_id":"MDQ6VXNlcjcyMzk1NzU=","avatar_url":"https://avatars.githubusercontent.com/u/7239575?v=4","gravatar_id":"","url":"https://api.github.com/users/frank-dspeed","html_url":"https://github.com/frank-dspeed","followers_url":"https://api.github.com/users/frank-dspeed/followers","following_url":"https://api.github.com/users/frank-dspeed/following{/other_user}","gists_url":"https://api.github.com/users/frank-dspeed/gists{/gist_id}","starred_url":"https://api.github.com/users/frank-dspeed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frank-dspeed/subscriptions","organizations_url":"https://api.github.com/users/frank-dspeed/orgs","repos_url":"https://api.github.com/users/frank-dspeed/repos","events_url":"https://api.github.com/users/frank-dspeed/events{/privacy}","received_events_url":"https://api.github.com/users/frank-dspeed/received_events","type":"User","site_admin":false},"labels":[{"id":113971226,"node_id":"MDU6TGFiZWwxMTM5NzEyMjY=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7","default":false,"description":"An existing issue was already created"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-05-03T16:41:14Z","updated_at":"2022-05-03T22:15:19Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"# Suggestion\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n-->\r\n\r\n## üîç Search Terms\r\n\r\n<!--\r\n  üí° Did you know? TypeScript has over 2,000 open suggestions!\r\n  üîé Please search thoroughly before logging new feature requests as most common ideas already have a proposal in progress.\r\n  The \"Common Feature Requests\" section of the FAQ lists many popular requests: https://github.com/Microsoft/TypeScript/wiki/FAQ#common-feature-requests\r\n\r\n  Replace the text below:\r\n-->\r\n \r\ncompile ts jsdoc d.ts declarations \r\n\r\n## ‚úÖ Viability Checklist\r\n\r\n<!--\r\n   Suggestions that don't meet all these criteria are very, very unlikely to be accepted.\r\n   We always recommend reviewing the TypeScript design goals before investing time writing\r\n   a proposal for ideas outside the scope of the project.\r\n-->\r\nMy suggestion meets these guidelines:\r\n\r\n* [x] This wouldn't be a breaking change in existing TypeScript/JavaScript code\r\n* [x] This wouldn't change the runtime behavior of existing JavaScript code\r\n* [x] This could be implemented without emitting different JS based on the types of the expressions\r\n* [x] This isn't a runtime feature (e.g. library functionality, non-ECMAScript syntax with JavaScript output, new syntax sugar for JS, etc.)\r\n* [x] This feature would agree with the rest of [TypeScript's Design Goals](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals).\r\n\r\n\r\n## ‚≠ê Suggestion\r\n\r\nI am suggesting to support tsconfig settings that enable to define .js files with corrosponding .d.ts files or even only jsdoc annotations\r\nto get compiled into a .ts file \r\n\r\nthat flow is totally unsupported while it would solve a list of issues that are open and not really fast solve able with other strategies. \r\n\r\n## üìÉ Motivating Example\r\n\r\n1. Developer a creates a .d.ts file and developer b can use that d.ts file to author a .js file that picks up the types defined for that file from the .d.ts file after that he can compile that to a single .ts file compiling the ts file will result in the exact same 2 source files \r\n\r\n2. i got a project only as .js and .d.ts and want to work with it in typescript as single file to export only parts of it that i use i could for rebundling create again a .ts representation for internal needs \r\n\r\n## üíª Use Cases\r\n\r\n- Code Consumption ReUse \r\n- eliminate the need to use a bundler for that task \r\n- eliminate the need for manual reconstruction.\r\n- eliminate the need to learn and understand maybe complex source build chains if you want to reuse existing tscode as you can take the bundle result + d.ts to recons\r\n\r\ni am fine to let this only work with .js ESM code as probally CJS will spit out un analyzeable code but for ESM we could get that work!\r\n\r\nMaybe get this working only with ESNext?","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48937/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48937/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48936","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48936/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48936/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48936/events","html_url":"https://github.com/microsoft/TypeScript/issues/48936","id":1224328010,"node_id":"I_kwDOAT9aAc5I-cNK","number":48936,"title":"Aliasing a type in a conditional type changes the result","user":{"login":"marcj","id":450980,"node_id":"MDQ6VXNlcjQ1MDk4MA==","avatar_url":"https://avatars.githubusercontent.com/u/450980?v=4","gravatar_id":"","url":"https://api.github.com/users/marcj","html_url":"https://github.com/marcj","followers_url":"https://api.github.com/users/marcj/followers","following_url":"https://api.github.com/users/marcj/following{/other_user}","gists_url":"https://api.github.com/users/marcj/gists{/gist_id}","starred_url":"https://api.github.com/users/marcj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marcj/subscriptions","organizations_url":"https://api.github.com/users/marcj/orgs","repos_url":"https://api.github.com/users/marcj/repos","events_url":"https://api.github.com/users/marcj/events{/privacy}","received_events_url":"https://api.github.com/users/marcj/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-05-03T16:31:42Z","updated_at":"2022-05-03T22:47:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"# Bug Report\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n-->\r\n\r\n### üîé Search Terms\r\n\r\nany, alias, conditional type, \r\n\r\n### üïó Version & Regression Information\r\n\r\nAll versions are effected.\r\n\r\n### ‚èØ Playground Link\r\n\r\n[Playground Link](https://www.typescriptlang.org/play?ts=4.6.2#code/JYOwLgpgTgZghgYwgAgKoGdrIN4FgBQyRywAJgFzIgCuAtgEbQDcBxy1mUIctEl6YKKADmLfAF8CBMAE8ADigCKAHgAqAPmQBeHHEoBrCDID2MZKuQAyZAKEhhycWOnyUYAIzbkKuCBmaIAA9IEFJ0b2UMaE0AfmRBahRKEAgAN2YCAHpM4gA9GKl8WQVkAEcAQT8vHz91MWK3ACYvCqqgkLCIqKhY+KhE5GS0jPxsvIL8IA)\r\n\r\n### üíª Code\r\n\r\n<!-- Please post the relevant code sample here as well-->\r\n```ts\r\ninterface User {\r\n    id: number;\r\n    username: string;\r\n}\r\n\r\ntype Q<T> = {a: keyof T & string };\r\n\r\ntype t1 = Q<any> extends Q<User> ? true : never;\r\n\r\ntype qAny = Q<any>;\r\ntype t2 = qAny extends Q<User> ? true : never;\r\n```\r\n\r\n### üôÅ Actual behavior\r\n\r\n`t1` is true, and `t2` is never.\r\n\r\n### üôÇ Expected behavior\r\n\r\nBoth, `t1` and `t2` should be the same and be `never`, because `{a: string} extends {a: 'id' | 'username'}` is false.\r\nThe only difference is that the left value of extends is for `t2` an alias, but the same type as in `t1`.\r\n\r\nInteresting might be that `t2` was in v4.1 `true` as well, but started to get the right value in v4.2.\r\n\r\nMaybe related to https://github.com/microsoft/TypeScript/issues/31295","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48936/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48936/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48935","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48935/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48935/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48935/events","html_url":"https://github.com/microsoft/TypeScript/issues/48935","id":1224316912,"node_id":"I_kwDOAT9aAc5I-Zfw","number":48935,"title":"Awaited<T> missing from utility types documentation","user":{"login":"wbt","id":563406,"node_id":"MDQ6VXNlcjU2MzQwNg==","avatar_url":"https://avatars.githubusercontent.com/u/563406?v=4","gravatar_id":"","url":"https://api.github.com/users/wbt","html_url":"https://github.com/wbt","followers_url":"https://api.github.com/users/wbt/followers","following_url":"https://api.github.com/users/wbt/following{/other_user}","gists_url":"https://api.github.com/users/wbt/gists{/gist_id}","starred_url":"https://api.github.com/users/wbt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wbt/subscriptions","organizations_url":"https://api.github.com/users/wbt/orgs","repos_url":"https://api.github.com/users/wbt/repos","events_url":"https://api.github.com/users/wbt/events{/privacy}","received_events_url":"https://api.github.com/users/wbt/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-05-03T16:20:06Z","updated_at":"2022-05-03T19:15:51Z","closed_at":"2022-05-03T19:15:51Z","author_association":"NONE","active_lock_reason":null,"body":"# Bug Report\r\n\r\n### üîé Search Terms\r\n\r\nawaited documentation \r\n\r\n### üïó Version & Regression Information\r\n\r\n- This changed between versions 4.4 and 4.5\r\n\r\n### ‚èØ Playground Link\r\n\r\nhttps://www.typescriptlang.org/docs/handbook/utility-types.html\r\n\r\n### üíª Code\r\nRelease notes for 4.5. describe a [new Awaited utility type](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-5.html#the-awaited-type-and-promise-improvements) but there's nothing about this on the [Utility Types documentation page](https://www.typescriptlang.org/docs/handbook/utility-types.html).  \r\n\r\n### üôÅ Actual behavior\r\n\r\nSpend a while looking through the Utility Types page and external resources to find something that provides this functionality, concluding it doesn't yet exist.\r\n\r\n### üôÇ Expected behavior\r\n\r\nDocumentation on the Utility Types page of this utility types that happily does exist, and is just only documented on GitHub and in release notes.\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48935/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48935/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48934","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48934/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48934/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48934/events","html_url":"https://github.com/microsoft/TypeScript/issues/48934","id":1224244633,"node_id":"I_kwDOAT9aAc5I-H2Z","number":48934,"title":"Infer callback parameters that has default values","user":{"login":"wesley-at-hl","id":99910199,"node_id":"U_kgDOBfSCNw","avatar_url":"https://avatars.githubusercontent.com/u/99910199?v=4","gravatar_id":"","url":"https://api.github.com/users/wesley-at-hl","html_url":"https://github.com/wesley-at-hl","followers_url":"https://api.github.com/users/wesley-at-hl/followers","following_url":"https://api.github.com/users/wesley-at-hl/following{/other_user}","gists_url":"https://api.github.com/users/wesley-at-hl/gists{/gist_id}","starred_url":"https://api.github.com/users/wesley-at-hl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wesley-at-hl/subscriptions","organizations_url":"https://api.github.com/users/wesley-at-hl/orgs","repos_url":"https://api.github.com/users/wesley-at-hl/repos","events_url":"https://api.github.com/users/wesley-at-hl/events{/privacy}","received_events_url":"https://api.github.com/users/wesley-at-hl/received_events","type":"User","site_admin":false},"labels":[{"id":113971226,"node_id":"MDU6TGFiZWwxMTM5NzEyMjY=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7","default":false,"description":"An existing issue was already created"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2022-05-03T15:21:43Z","updated_at":"2022-05-03T22:48:39Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"# Bug Report\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n-->\r\n\r\n### üîé Search Terms\r\n`callback`, `default parameter`, `default values` `infer`\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n-->\r\n\r\n### üïó Version & Regression Information\r\n\r\n<!-- When did you start seeing this bug occur?\r\nThis exists in the earliest playground version (3.3). It is also reproducible in nightly (4.7.0, dev20220503)\r\n\"Bugs\" that have existed in TS for a long time are very likely to be FAQs; refer to\r\n  https://github.com/Microsoft/TypeScript/wiki/FAQ#common-bugs-that-arent-bugs\r\n\r\nIf possible, please try testing the nightly version of TS to see if it's already been fixed.\r\nFor npm: `typescript@next`\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n\r\nNote: The TypeScript Playground can be used to try older versions of TypeScript.\r\n\r\nPlease keep and fill in the line that best applies:\r\n-->\r\n- This is the behavior in every version I tried, and I reviewed the FAQ for entries about `infer`, `callback`, `default param`\r\n\r\n### ‚èØ Playground Link\r\n\r\n<!--\r\n  A link to a TypeScript Playground \"Share\" link which shows this behavior\r\n\r\n  The TypeScript Workbench can be used for more complex setups, try\r\n  https://www.typescriptlang.org/dev/bug-workbench/\r\n\r\n  As a last resort, you can link to a repo, but these will be slower for us to investigate.\r\n-->\r\n[Playground link with relevant code](https://www.typescriptlang.org/play?ts=4.7.0-dev.20220503#code/PTAEAEBcE8AcFMDOwBO8CGBjSoAW7FQBXReAYXQBtKAjLAa1BgVANAFgAoED7sAMyIA7bAEsA9kOKkK1OpnoAeACqh4AD0jwhAE0IAKAHTH0KAOaIAXKyHQA2gF0AlKAC8APhvR3+zFVoM1soANKA68LBWoAAiEdrhItAAMqKIkE5BANxcIDlgkLipoEXooIiiALawlKL8ovA6oABu8CjlkqDi-MU4Beg4aaLUZbjiAO6EBfDFiIhE8HlcgiKQElIk5P7ySiGgAKo+fnKBoPpNVEEuHvsZp+eUl26ee6AA3lygn6BokEQoUkcAgouABfbKcPLFIT8VpoRpsAAGmEkaVA-CE1jOVAA-NYaOJxJQMEIrp58YTiQiuMihKj0W47lQGZAUPNbuSiegpNd7pleJDRNDYQ1WIQEcsxB0NrIgUoOcTQAAfYi6eB1IQNULyrmHLYnLEPUDaqTK4ThdUNUlGgmckmY+54m0K02qi06K3GqmcaV6hT6dFOPmgHgFIpjcQoeiEGjwPwbNFSIqCmEoOGgZGp2OQSjQMoRUz9eA5rgCoWZ+FiiWrKUyX1KYT0ITjIRap063x1+0XFWN5sett2xmGhtNsYkp7Wilcr0+45+g3M1nwdkDif3QPBsCwiNG2PoeP3GY90dCIA)\r\n\r\n### üíª Code\r\n```ts\r\n// a simplified version of useCallback from react\r\nfunction useCallback<T, U>(callback: (val: T) => U): (val: T) => U {\r\n    return callback\r\n};\r\n\r\n// inferred as `const fn: (val?: boolean) => boolean`\r\nconst fn = (val = true): boolean => val; // no error\r\n\r\n// inferred as `function useCallback<boolean | undefined, boolean>(callback: (val: boolean | undefined) => boolean): (val: boolean | undefined) => boolean`\r\nuseCallback(fn);  // no error since fn is inferred separately\r\n\r\n// inferred as `function useCallback<unknown, boolean>(callback: (val: unknown) => boolean): (val: unknown) => boolean`\r\nuseCallback((val = true): boolean => val); // error because val is unknown\r\n```\r\n\r\n### üôÅ Actual behavior\r\n\r\nin `useCallback((val = true): boolean => val)`, val is inferred as unknown\r\n\r\n### üôÇ Expected behavior\r\n\r\nin `useCallback((val = true): boolean => val)`, val is inferred as boolean because it has a default value\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48934/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48934/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48932","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48932/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48932/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48932/events","html_url":"https://github.com/microsoft/TypeScript/issues/48932","id":1224178186,"node_id":"I_kwDOAT9aAc5I93oK","number":48932,"title":"Inconsistent string auto-complete when inside/outside string","user":{"login":"tjjfvi","id":44031566,"node_id":"MDQ6VXNlcjQ0MDMxNTY2","avatar_url":"https://avatars.githubusercontent.com/u/44031566?v=4","gravatar_id":"","url":"https://api.github.com/users/tjjfvi","html_url":"https://github.com/tjjfvi","followers_url":"https://api.github.com/users/tjjfvi/followers","following_url":"https://api.github.com/users/tjjfvi/following{/other_user}","gists_url":"https://api.github.com/users/tjjfvi/gists{/gist_id}","starred_url":"https://api.github.com/users/tjjfvi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tjjfvi/subscriptions","organizations_url":"https://api.github.com/users/tjjfvi/orgs","repos_url":"https://api.github.com/users/tjjfvi/repos","events_url":"https://api.github.com/users/tjjfvi/events{/privacy}","received_events_url":"https://api.github.com/users/tjjfvi/received_events","type":"User","site_admin":false},"labels":[{"id":113970366,"node_id":"MDU6TGFiZWwxMTM5NzAzNjY=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21","default":false,"description":"A bug in TypeScript"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/microsoft/TypeScript/milestones/29","html_url":"https://github.com/microsoft/TypeScript/milestone/29","labels_url":"https://api.github.com/repos/microsoft/TypeScript/milestones/29/labels","id":1973940,"node_id":"MDk6TWlsZXN0b25lMTk3Mzk0MA==","number":29,"title":"Backlog","description":"","creator":{"login":"mhegazy","id":8000722,"node_id":"MDQ6VXNlcjgwMDA3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/8000722?v=4","gravatar_id":"","url":"https://api.github.com/users/mhegazy","html_url":"https://github.com/mhegazy","followers_url":"https://api.github.com/users/mhegazy/followers","following_url":"https://api.github.com/users/mhegazy/following{/other_user}","gists_url":"https://api.github.com/users/mhegazy/gists{/gist_id}","starred_url":"https://api.github.com/users/mhegazy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mhegazy/subscriptions","organizations_url":"https://api.github.com/users/mhegazy/orgs","repos_url":"https://api.github.com/users/mhegazy/repos","events_url":"https://api.github.com/users/mhegazy/events{/privacy}","received_events_url":"https://api.github.com/users/mhegazy/received_events","type":"User","site_admin":false},"open_issues":2201,"closed_issues":937,"state":"open","created_at":"2016-08-31T00:21:08Z","updated_at":"2022-05-04T00:06:25Z","due_on":null,"closed_at":null},"comments":0,"created_at":"2022-05-03T14:25:43Z","updated_at":"2022-05-03T19:24:23Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"# Bug Report\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n-->\r\n\r\n### üîé Search Terms\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n-->\r\n\r\ninconsistent string auto complete intellisense suggestions tuple position\r\n\r\n### üïó Version & Regression Information\r\n\r\n<!-- When did you start seeing this bug occur?\r\n\r\n\"Bugs\" that have existed in TS for a long time are very likely to be FAQs; refer to\r\n  https://github.com/Microsoft/TypeScript/wiki/FAQ#common-bugs-that-arent-bugs\r\n\r\nIf possible, please try testing the nightly version of TS to see if it's already been fixed.\r\nFor npm: `typescript@next`\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n\r\nNote: The TypeScript Playground can be used to try older versions of TypeScript.\r\n\r\nPlease keep and fill in the line that best applies:\r\n-->\r\n\r\nThis is the behavior in every version I tried, and I reviewed the FAQ for entries about auto-complete / suggestions.\r\n\r\n### ‚èØ Playground Link\r\n\r\n<!--\r\n  A link to a TypeScript Playground \"Share\" link which shows this behavior\r\n\r\n  The TypeScript Workbench can be used for more complex setups, try\r\n  https://www.typescriptlang.org/dev/bug-workbench/\r\n\r\n  As a last resort, you can link to a repo, but these will be slower for us to investigate.\r\n-->\r\n[Playground link with relevant code](https://www.typescriptlang.org/play?#code/CYUwxgNghgTiAEAzArgOzAFwJYHtVJxwAoAPALngG0AiEqagGnloCNHmSxqBdASgoBuOLMACwAKESEileHwkB6BfBUA9eJhgQA1AGcADlDAJdACxwB3XR3pNW7WlwlTiNHr0XKV8dZp0GjE3MrG2oJIA)\r\n\r\n### üíª Code\r\n\r\n<!-- Please post the relevant code sample here as well-->\r\n```ts\r\ndeclare function foo(x: [\"xa\", \"xb\", \"xc\"]): void\r\nfoo([ ])\r\n//   ^ ctrl+space shows \"xa\", \"xb\", \"xc\"\r\nfoo([\"\"])\r\n//    ^ ctrl+space shows \"xa\"\r\n```\r\n\r\n### üôÅ Actual behavior\r\n\r\nThe suggestion list outside of the string ignores the tuple position and suggests all members, while the suggestion list inside of a string suggests only the string for that position.\r\n\r\n### üôÇ Expected behavior\r\n\r\nBoth suggestion lists would show `\"xa\"` but not `\"xb\"` or `\"xc\"`.\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48932/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48932/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48931","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48931/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48931/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48931/events","html_url":"https://github.com/microsoft/TypeScript/issues/48931","id":1224080075,"node_id":"I_kwDOAT9aAc5I9frL","number":48931,"title":"ReturnType of generic constraint will not compile","user":{"login":"tannerlinsley","id":5580297,"node_id":"MDQ6VXNlcjU1ODAyOTc=","avatar_url":"https://avatars.githubusercontent.com/u/5580297?v=4","gravatar_id":"","url":"https://api.github.com/users/tannerlinsley","html_url":"https://github.com/tannerlinsley","followers_url":"https://api.github.com/users/tannerlinsley/followers","following_url":"https://api.github.com/users/tannerlinsley/following{/other_user}","gists_url":"https://api.github.com/users/tannerlinsley/gists{/gist_id}","starred_url":"https://api.github.com/users/tannerlinsley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tannerlinsley/subscriptions","organizations_url":"https://api.github.com/users/tannerlinsley/orgs","repos_url":"https://api.github.com/users/tannerlinsley/repos","events_url":"https://api.github.com/users/tannerlinsley/events{/privacy}","received_events_url":"https://api.github.com/users/tannerlinsley/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-05-03T13:16:00Z","updated_at":"2022-05-03T15:51:02Z","closed_at":"2022-05-03T15:51:02Z","author_association":"NONE","active_lock_reason":null,"body":"# Bug Report\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n-->\r\n\r\n### üîé Search Terms\r\n\r\ngeneric, constraint, returnType\r\n\r\n### üïó Version & Regression Information\r\n\r\n- This is the behavior in every version I've tried\r\n\r\n### ‚èØ Playground Link\r\n\r\n[Playground link with relevant code](https://www.typescriptlang.org/play?ts=4.5.2#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQFA0wCeYWcA4lgHZZTC7oC8cAN404mTgBNuALjgAKAJRx+APjioYPDgHNR4jlMoTZGrboC+dRs32HuARgA8AFThYAHjEnp2XHnzVBRWU1bBgAVygOZyYsFwBtMmwDbjIAXRV6WNtubgAmFzdPbzZObl5UQPklVThnROS7CXS6XAgODTgAWQYAYRJILg54QUKPLwMfMv9K4NqRMTaO+C8Ne1lG3KgnZyq5tTIACSwAGxOIWkX2ztWYPI3JLYLd5WqQ8mOzi5pLIA)\r\n\r\n### üíª Code\r\n\r\n```ts\r\ntype Generics = {\r\n  Render: () => string\r\n  Rendered: string\r\n}\r\n\r\ntype Renderer1<T extends Generics> = () => ReturnType<T['Render']>\r\ntype Renderer2<T extends Generics> = () => T['Rendered']\r\n\r\nconst MyComponent = <T extends Generics>() => {\r\n  const test1: Renderer1<T> = () => 'Hello'\r\n  const test2: Renderer2<T> = () => 'World'\r\n}\r\n\r\n```\r\n\r\n### üôÅ Actual behavior\r\n\r\nThe `test1` renderer above cannot be assigned to `Renderer` because it's return type does not match the return type of `Generics['Render']` even though there is a sufficient constraint on the generics to require it.\r\n\r\n### üôÇ Expected behavior\r\n\r\nI would expect `test1`'s `() => string` type to be assignable to `ReturnType<T['Render']>` when `T` is constrained to `Generics`","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48931/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48931/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48933","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48933/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48933/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48933/events","html_url":"https://github.com/microsoft/TypeScript/issues/48933","id":1224234521,"node_id":"I_kwDOAT9aAc5I-FYZ","number":48933,"title":"JS/TS detect all syntax errors in RegExps.","user":{"login":"pygy","id":54515,"node_id":"MDQ6VXNlcjU0NTE1","avatar_url":"https://avatars.githubusercontent.com/u/54515?v=4","gravatar_id":"","url":"https://api.github.com/users/pygy","html_url":"https://github.com/pygy","followers_url":"https://api.github.com/users/pygy/followers","following_url":"https://api.github.com/users/pygy/following{/other_user}","gists_url":"https://api.github.com/users/pygy/gists{/gist_id}","starred_url":"https://api.github.com/users/pygy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pygy/subscriptions","organizations_url":"https://api.github.com/users/pygy/orgs","repos_url":"https://api.github.com/users/pygy/repos","events_url":"https://api.github.com/users/pygy/events{/privacy}","received_events_url":"https://api.github.com/users/pygy/received_events","type":"User","site_admin":false},"labels":[{"id":113971226,"node_id":"MDU6TGFiZWwxMTM5NzEyMjY=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7","default":false,"description":"An existing issue was already created"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-05-03T12:01:11Z","updated_at":"2022-05-03T19:21:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"<!-- ‚ö†Ô∏è‚ö†Ô∏è Do Not Delete This! feature_request_template ‚ö†Ô∏è‚ö†Ô∏è -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\nVSCode detects some syntax errors in RegExps in JS (e.g. `/[/` gets squiggles and a helpful message on hover), but it misses many others\r\n\r\nAs you know, in JS (And thus TS), Unicode regexps have a grammar that's incompatible with legacy, non-u ones, and it should be taken into account.\r\n\r\nAll of these are invalid, but are not marked as such:\r\n\r\n```JS\r\n/\\b+/ // can't quantify assertions\r\n```\r\n```JS\r\n/^+/ // can't quantify assertions\r\n```\r\n```JS\r\n/$+/ // can't quantify assertions\r\n```\r\n```JS\r\n/(?<=)+/ // can't quantify assertions\r\n```\r\n```JS\r\n/(?=)+/u // can't quantify look ahead assertions in u mode\r\n```\r\n```JS\r\n/]/u // syntax characters must be escaped in u mode\r\n```\r\n```JS\r\n/{a}/u // syntax characters must be escaped in u mode\r\n```\r\n```JS\r\n/\\-/u // non-syntax characters must not be escaped in u mode\r\n```\r\n```JS\r\n/\\1/u // orphan back reference in u mode\r\n```\r\n```JS\r\n/\\k<OrphanNameRefWithUFlag>/u\r\n```","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48933/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48933/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48929","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48929/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48929/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48929/events","html_url":"https://github.com/microsoft/TypeScript/issues/48929","id":1223932109,"node_id":"I_kwDOAT9aAc5I87jN","number":48929,"title":"Control Flow Analysis of aliased conditions on object properties not working","user":{"login":"LorenzHenk","id":10603631,"node_id":"MDQ6VXNlcjEwNjAzNjMx","avatar_url":"https://avatars.githubusercontent.com/u/10603631?v=4","gravatar_id":"","url":"https://api.github.com/users/LorenzHenk","html_url":"https://github.com/LorenzHenk","followers_url":"https://api.github.com/users/LorenzHenk/followers","following_url":"https://api.github.com/users/LorenzHenk/following{/other_user}","gists_url":"https://api.github.com/users/LorenzHenk/gists{/gist_id}","starred_url":"https://api.github.com/users/LorenzHenk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LorenzHenk/subscriptions","organizations_url":"https://api.github.com/users/LorenzHenk/orgs","repos_url":"https://api.github.com/users/LorenzHenk/repos","events_url":"https://api.github.com/users/LorenzHenk/events{/privacy}","received_events_url":"https://api.github.com/users/LorenzHenk/received_events","type":"User","site_admin":false},"labels":[{"id":113971226,"node_id":"MDU6TGFiZWwxMTM5NzEyMjY=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7","default":false,"description":"An existing issue was already created"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-05-03T10:39:34Z","updated_at":"2022-05-04T10:26:23Z","closed_at":"2022-05-04T10:26:23Z","author_association":"NONE","active_lock_reason":null,"body":"# Bug Report\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n-->\r\n\r\n### üîé Search Terms\r\n\r\nControl Flow Analysis\r\ntype guard\r\n\r\n### üïó Version & Regression Information\r\n\r\n<!-- When did you start seeing this bug occur?\r\n\r\n\"Bugs\" that have existed in TS for a long time are very likely to be FAQs; refer to\r\n  https://github.com/Microsoft/TypeScript/wiki/FAQ#common-bugs-that-arent-bugs\r\n\r\nIf possible, please try testing the nightly version of TS to see if it's already been fixed.\r\nFor npm: `typescript@next`\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n\r\nNote: The TypeScript Playground can be used to try older versions of TypeScript.\r\n\r\nPlease keep and fill in the line that best applies:\r\n-->\r\n\r\n- This is the behavior in every version I tried, and I reviewed the FAQ for entries about _type guard_ and _Control Flow Analysis_\r\n\r\n\r\n### ‚èØ Playground Link\r\n\r\n<!--\r\n  A link to a TypeScript Playground \"Share\" link which shows this behavior\r\n\r\n  The TypeScript Workbench can be used for more complex setups, try\r\n  https://www.typescriptlang.org/dev/bug-workbench/\r\n\r\n  As a last resort, you can link to a repo, but these will be slower for us to investigate.\r\n-->\r\n[Playground link with relevant code](https://www.typescriptlang.org/play?ts=4.7.0-dev.20220503#code/FASwdgLgpgTgZgQwMZQAQFUDOtUG9iqGpgIC2UAXKphDOAOaoA+xArgDbvAC+wwcrMEgggA9mFRxRogBSsqWWAEo8BIiDhyAdCXKoAhAF5DbTkvxFLqVjrJQt7KGHoQAFmsK9e-QcLESAIwQYGVxdKG4FbBgVCyIkcRpUEEwANQR2EAATVBNwg2NTLksNGRT0zKzzDytwhycXd0svPgEhEXFUIIAvOSjlVUsEsCTyjOzc61s9IzyOYvVNMcrqqyIAenXUNxTqV1EOHIC0AHdRGABrBlQETFQTqE4ayxs6x2c3GpagA)\r\n\r\n### üíª Code\r\n\r\n<!-- Please post the relevant code sample here as well-->\r\n```ts\r\ninterface User {\r\n    name: string | null\r\n}\r\n\r\nfunction baz(u: User) {\r\n    const isValid = u.name !== null\r\n\r\n    if(isValid) {\r\n        // `u.name` should be `string`, but the following error appears:\r\n        // User.name: string | null\r\n        // Object is possibly 'null'. (2531)\r\n        u.name.length\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n### üôÅ Actual behavior\r\n\r\n`u.name` is of type `string | null`\r\n\r\n### üôÇ Expected behavior\r\n\r\n`u.name` should be of type `string`","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48929/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48929/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48928","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48928/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48928/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48928/events","html_url":"https://github.com/microsoft/TypeScript/issues/48928","id":1223905017,"node_id":"I_kwDOAT9aAc5I8075","number":48928,"title":"`unknown` should narrow to `{}` when non-null","user":{"login":"paulferaud","id":43784631,"node_id":"MDQ6VXNlcjQzNzg0NjMx","avatar_url":"https://avatars.githubusercontent.com/u/43784631?v=4","gravatar_id":"","url":"https://api.github.com/users/paulferaud","html_url":"https://github.com/paulferaud","followers_url":"https://api.github.com/users/paulferaud/followers","following_url":"https://api.github.com/users/paulferaud/following{/other_user}","gists_url":"https://api.github.com/users/paulferaud/gists{/gist_id}","starred_url":"https://api.github.com/users/paulferaud/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulferaud/subscriptions","organizations_url":"https://api.github.com/users/paulferaud/orgs","repos_url":"https://api.github.com/users/paulferaud/repos","events_url":"https://api.github.com/users/paulferaud/events{/privacy}","received_events_url":"https://api.github.com/users/paulferaud/received_events","type":"User","site_admin":false},"labels":[{"id":113971226,"node_id":"MDU6TGFiZWwxMTM5NzEyMjY=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7","default":false,"description":"An existing issue was already created"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-05-03T10:06:15Z","updated_at":"2022-05-03T16:50:28Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"# Bug Report\r\n\r\n### üîé Search Terms\r\n\r\nempty type, unknown, top type, unknown not null\r\n\r\n### üïó Version & Regression Information\r\n\r\nStarting 3.0 (when `unknown` was introduced) and until at least 4.6.2\r\n- This is the behavior in every version I tried, and I reviewed the FAQ for entries about unknown\r\n\r\n### ‚èØ Playground Link\r\n\r\n[Playground link with relevant code](https://www.typescriptlang.org/play?useUnknownInCatchVariables=true#code/DYUwLgBAtgngqgOwNYIPYHcEC4IFdlqYQC8ECuwwAUKJLAKJQAOYMOA3gL4nTwEYIIAfiEQuVIA)\r\n\r\n### üíª Code\r\n\r\n```ts\r\nlet myUnknown: unknown = null\r\nlet myEmpty: {} = myUnknown ?? 5\r\nif (myUnknown != null) {\r\n    let myEmpty2: {} = myUnknown\r\n}\r\n```\r\n\r\n### üôÅ Actual behavior\r\n\r\n```\r\nType 'unknown' is not assignable to type '{}'. (2322)\r\n```\r\n\r\n### üôÇ Expected behavior\r\n\r\nI believe narrowing should be happening. `unkown` is the top type for everything. `{}` is the top type for everything non-`null` non-`undefined`. Therefore, when an `unknown` is or'ed (`||` or `??`) with a non-null, or if checked not-null itself (`if (myUnknown != null)`), then the result should be narrowed to `{}`.\r\n\r\nExtra context: I'm trying to wrap around `JSON.parse` to return `{}` when the result is null. I would have expected that:\r\n```\r\nJSON.parse(arg) ?? {}\r\n```\r\nBe of the type `{}`, but TypeScript is insisting that it's actually `unknown`.","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48928/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48928/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48927","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48927/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48927/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48927/events","html_url":"https://github.com/microsoft/TypeScript/issues/48927","id":1223834568,"node_id":"I_kwDOAT9aAc5I8jvI","number":48927,"title":"Promise intersection with primitive results in wrong awaited type","user":{"login":"Azarattum","id":43073346,"node_id":"MDQ6VXNlcjQzMDczMzQ2","avatar_url":"https://avatars.githubusercontent.com/u/43073346?v=4","gravatar_id":"","url":"https://api.github.com/users/Azarattum","html_url":"https://github.com/Azarattum","followers_url":"https://api.github.com/users/Azarattum/followers","following_url":"https://api.github.com/users/Azarattum/following{/other_user}","gists_url":"https://api.github.com/users/Azarattum/gists{/gist_id}","starred_url":"https://api.github.com/users/Azarattum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Azarattum/subscriptions","organizations_url":"https://api.github.com/users/Azarattum/orgs","repos_url":"https://api.github.com/users/Azarattum/repos","events_url":"https://api.github.com/users/Azarattum/events{/privacy}","received_events_url":"https://api.github.com/users/Azarattum/received_events","type":"User","site_admin":false},"labels":[{"id":371615203,"node_id":"MDU6TGFiZWwzNzE2MTUyMDM=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Working%20as%20Intended","name":"Working as Intended","color":"fbca04","default":false,"description":"The behavior described is the intended behavior; this is not a bug"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2022-05-03T08:48:14Z","updated_at":"2022-05-04T08:24:05Z","closed_at":"2022-05-03T21:25:56Z","author_association":"NONE","active_lock_reason":null,"body":"# Bug Report\r\nWhen we make an intersection of a promise with a primitive type like `Promise<T> & T` (where T is primitive (non-object)), the resulting type from `await (Promise<T> & T)` is wrong (still contains a promise). This is clearly a bug since `Awaited<Promise<T> & T>` and `(Promise<T> & T).then(x => {})` behave correctly (the result is only `T`). The issue is only observed when using the `await` keyword.\r\n\r\nThe types arrangement might seem arbitrary, but it has a **valid use case** which is provided in the playground link below.\r\n\r\n### üîé Search Terms\r\n\r\n`PROMISE & PRIMITIVE`, `PROMISE INTERSECTION`, `AWAITED TYPE`, `INCONSITENT THEN AND AWAIT`\r\n\r\n### üïó Version & Regression Information\r\n\r\n> Tested only versions available on playground!\r\n- This changed between versions `4.5.5` and `4.7.0-dev.20220503`. `4.4.4` and lower are unaffected by this bug.\r\n\r\n### ‚èØ Playground Link\r\n\r\n[Playground link with relevant code](https://www.typescriptlang.org/play?ssl=38&ssc=27&pln=38&pc=51#code/PTAEF5K6a0CEBOB7A1gUwHagKIA8BDAWwAcAbdCWa6AWACgCBnAT0wGNQAKASggD5QAbwagxoAC4sSlAIIRQABRREAlk3QAeTAFciAI3SJBAMlC6DRgNyjx7ZJiYTQBBUIC+LpqFk36tsXtHZ30FAgB3AlVnAj9xSWlKeAUpGWQAM1B9K1AQBFAmAAtkHTIAEyzKACILQ0QqgBosnWdo0HVQKuVkNQ1tPTrTcwGjKoBCBgCXADoJQqwuLnY+cEERenixVMoAYRTEjNB2HLy9jpqR+u5wwtV2Qvbve0RELAkeKfceP3dJ+jyaIDwKAAOrIRCoVSYADmuEIpAoVCBsAYzDYnF4AmEU22PgU3V6WgAcpchiTLIg4nYHE4XG5PMwfH4pkFaaFgREojEqVtEvlgdtDtlcmBkudyXUqtdbvdHkdwa9MO8-vECLN5phFsssetNgkZKA9gKDpljiLDXKqhLRtK7g8Os9FcqNuIvj8-gDkbBQeDUAQUDpMBUvSj6LiACrIADy+gAVuh2BJNOHBMDw6B0HgJFgyt4nIgodDbAB+UAAZQkBZhtgAXKB05ns0HvLUjCXQNbELX6xmsznvPpkMgKARMO34EOR2OXXWG33mwUWAZh+2y0vB2Ru+HmWG+TsevooegysmmgBVBQp-EqdRaK9mSMx+OJzRn-g7tEcbgrNY4vnyYF9wMI8T1bYweXlYI6WBDwvCZFVqSg9kXEiNpYj-A1kmNNJMmFPIxW8C4KSlLgbjtOVHTeD5-BdMQ1TmBYlh-bFaPEXEjX1dBDjNU5LTAkiyNlB0FSoz5vgYX4aM9EM4AAGVUNQJAICRVAcJEZPAVFWC-TFVhY+JWWcVgiAUNdlzILgqkDVQAEcdCqcTWNxADDQPED+gpJowNAAAfTjDmM98WRpGJ6Tg3wELEVRMi4VxIEXIg+F1PVzRBSgyGQWlRxcQ8yGiFhJGQLwNEQZwGNAay7MoYyNwKKF2EocJKCCAA3IxswqNoJCKszauQOMEwkT5IsgtkwlQ7kMKSfYcKyE5RT4y4BJle0nhEpVqKmeiNS1ZjkvidiZq4015otc5+NtIS1peUTWLdCSPTADS4DPDRDWYShnsgLT0W-HVgqgsplLi4R5jIDK6yqcJwXKKp3AgwzQAyggykLUz12HSzkdRmEHIg3EABFgaOw4gaU-G+Vk5AUbR7DjqR6mcehHcDv-a8elvTQiaUoYuG51w-KpmmYUcgyQug4QGW8CKaPiaLuFcMZgWxwskqmVVpjBjLzX5uVsePdXxG2hY8B1L5zXgFpQCagoVPB0BCgINrJHmUASBvN78x0RMdFeQqkfUJtQHScEKpIMn0CYYbZcQsaOQmlwKcwkncNO5InFUe2giUqFCKFpmpW2Bopn0TX0HB5BTqYIqbf9ShAwIfREW6iq3qqMuK-b0AAHJ4G78sAAkozPWSCYQHBcAARTPWRZPrKMe52fuowAJR7gnu4mVj8IKYpSgqIko3TbOomwKp88LQu+SYerKGUl2OhIZAoVaVpvGhHR-VHbNj39wwGZRseLeW11SMW1HpfabE9wpyOKdM43hYw6FpFUbm6BlrkWEjdDaht2Ad21nkNKRxspIOqHg5AVQxIs3EHkIkyBsxNDmPfWQE1jzJkEIYR2bVrqvETAHDAi9u7F23mAAoRV2AjkQGQAqvd+4dH0CgDAmBphTVAGPYEzCuSsNkIICSQA)\r\n\r\n### üíª Code\r\n\r\n```ts\r\ntype A = Promise<number> & number;\r\nconst a = {} as A;\r\n\r\nconst b = await a;\r\ntype B = typeof b; // B should be \"number\", but it is \"Promise<number> & number\"!\r\n\r\na.then((c) => {\r\n  type C = typeof c; // C is \"number\" (which is corrent)\r\n});\r\n\r\ntype D = Awaited<A> // D is \"number\" (which is corrent)\r\n```\r\n\r\n### üôÅ Actual behavior\r\nType `B` still contains `Promise<number>` despite of the value being awaited.\r\n\r\n### üôÇ Expected behavior\r\nIn the example above `B` **has to be equal** to `C` and `D`.\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48927/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48927/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48926","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48926/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48926/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48926/events","html_url":"https://github.com/microsoft/TypeScript/issues/48926","id":1223539783,"node_id":"I_kwDOAT9aAc5I7bxH","number":48926,"title":"Detect the correct conditional return type in class methods","user":{"login":"nbouvrette","id":6453322,"node_id":"MDQ6VXNlcjY0NTMzMjI=","avatar_url":"https://avatars.githubusercontent.com/u/6453322?v=4","gravatar_id":"","url":"https://api.github.com/users/nbouvrette","html_url":"https://github.com/nbouvrette","followers_url":"https://api.github.com/users/nbouvrette/followers","following_url":"https://api.github.com/users/nbouvrette/following{/other_user}","gists_url":"https://api.github.com/users/nbouvrette/gists{/gist_id}","starred_url":"https://api.github.com/users/nbouvrette/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nbouvrette/subscriptions","organizations_url":"https://api.github.com/users/nbouvrette/orgs","repos_url":"https://api.github.com/users/nbouvrette/repos","events_url":"https://api.github.com/users/nbouvrette/events{/privacy}","received_events_url":"https://api.github.com/users/nbouvrette/received_events","type":"User","site_admin":false},"labels":[{"id":113971226,"node_id":"MDU6TGFiZWwxMTM5NzEyMjY=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7","default":false,"description":"An existing issue was already created"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-05-03T01:38:02Z","updated_at":"2022-05-03T18:29:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"# Suggestion\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n-->\r\n\r\n## üîç Search Terms\r\n\r\n<!--\r\n  üí° Did you know? TypeScript has over 2,000 open suggestions!\r\n  üîé Please search thoroughly before logging new feature requests as most common ideas already have a proposal in progress.\r\n  The \"Common Feature Requests\" section of the FAQ lists many popular requests: https://github.com/Microsoft/TypeScript/wiki/FAQ#common-feature-requests\r\n\r\n  Replace the text below:\r\n-->\r\n\r\nList of keywords you searched for before creating this issue. Write them down here so that others can find this suggestion more easily and help provide feedback.\r\n\r\nconditional type method \r\n\r\n## ‚úÖ Viability Checklist\r\n\r\n<!--\r\n   Suggestions that don't meet all these criteria are very, very unlikely to be accepted.\r\n   We always recommend reviewing the TypeScript design goals before investing time writing\r\n   a proposal for ideas outside the scope of the project.\r\n-->\r\nMy suggestion meets these guidelines:\r\n\r\n* [x] This wouldn't be a breaking change in existing TypeScript/JavaScript code\r\n* [x] This wouldn't change the runtime behavior of existing JavaScript code\r\n* [x] This could be implemented without emitting different JS based on the types of the expressions\r\n* [x] This isn't a runtime feature (e.g. library functionality, non-ECMAScript syntax with JavaScript output, new syntax sugar for JS, etc.)\r\n* [x] This feature would agree with the rest of [TypeScript's Design Goals](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals).\r\n\r\n\r\n## ‚≠ê Suggestion\r\n\r\nWhen using a class, calling certain methods and getting a certain return value can have a direct impact on the type of another method, which would avoid boilerplate code.\r\n\r\n## üìÉ Motivating Example\r\n\r\nIn the example below the method `getMatch` will return `string | undefined`. We could simply call `if (resolver.getMatch() !== undefined)` to get the correct type. But adding methods like `hasMatch` that returns a `boolean` instead makes the code easier to use and more readable.\r\n\r\n```ts\r\nconst resolver = new Resolver(data);\r\nif (resolver.hasMatch()) {\r\n   console.log(`This is the match: ${resolver.getMatch()}`); // <-- Invalid type \"string | undefined\" of template literal expression.\r\n} else {\r\n   console.log('`getMatch` returns `undefined` (no match)');\r\n}\r\n```\r\n\r\nThe only workaround is to cast `as string` or to replace the `hasMatch` method with `!== undefined` statements which is more verbose and less friendly to use.\r\n\r\n## üíª Use Cases\r\n\r\nThere could be many use cases where the return value of certain methods could dynamically infer the return type of other methods. The main goal would be to remove boilerplate code, especially when in `strict` mode.\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48926/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48926/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48922","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48922/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48922/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48922/events","html_url":"https://github.com/microsoft/TypeScript/issues/48922","id":1223364868,"node_id":"I_kwDOAT9aAc5I6xEE","number":48922,"title":"Tagged union types aren't preserved during key remapping","user":{"login":"Zip753","id":5332191,"node_id":"MDQ6VXNlcjUzMzIxOTE=","avatar_url":"https://avatars.githubusercontent.com/u/5332191?v=4","gravatar_id":"","url":"https://api.github.com/users/Zip753","html_url":"https://github.com/Zip753","followers_url":"https://api.github.com/users/Zip753/followers","following_url":"https://api.github.com/users/Zip753/following{/other_user}","gists_url":"https://api.github.com/users/Zip753/gists{/gist_id}","starred_url":"https://api.github.com/users/Zip753/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Zip753/subscriptions","organizations_url":"https://api.github.com/users/Zip753/orgs","repos_url":"https://api.github.com/users/Zip753/repos","events_url":"https://api.github.com/users/Zip753/events{/privacy}","received_events_url":"https://api.github.com/users/Zip753/received_events","type":"User","site_admin":false},"labels":[{"id":113971226,"node_id":"MDU6TGFiZWwxMTM5NzEyMjY=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7","default":false,"description":"An existing issue was already created"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-05-02T21:10:18Z","updated_at":"2022-05-03T18:24:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"# Bug Report\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n-->\r\n\r\n### üîé Search Terms\r\n\r\n`union remap`\r\n\r\n### üïó Version & Regression Information\r\n\r\n<!-- When did you start seeing this bug occur?\r\n\r\n\"Bugs\" that have existed in TS for a long time are very likely to be FAQs; refer to\r\n  https://github.com/Microsoft/TypeScript/wiki/FAQ#common-bugs-that-arent-bugs\r\n\r\nIf possible, please try testing the nightly version of TS to see if it's already been fixed.\r\nFor npm: `typescript@next`\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n\r\nNote: The TypeScript Playground can be used to try older versions of TypeScript.\r\n\r\nPlease keep and fill in the line that best applies:\r\n-->\r\n- This is the behavior in every version I tried, and I reviewed the ~FAQ~ documentation for entries about \"Mapped Types\", \"Unions and Intersection Types\", \"Control Flow Analysis for Destructured Discriminated Unions\" from TS 4.6 announcement.\r\n\r\n### ‚èØ Playground Link\r\n\r\n<!--\r\n  A link to a TypeScript Playground \"Share\" link which shows this behavior\r\n\r\n  The TypeScript Workbench can be used for more complex setups, try\r\n  https://www.typescriptlang.org/dev/bug-workbench/\r\n\r\n  As a last resort, you can link to a repo, but these will be slower for us to investigate.\r\n-->\r\n[Playground Link](https://www.typescriptlang.org/play?ts=4.7.0-dev.20220502#code/KYOwrgtgBAou0G8BQVVQIJQLxQEQENcAaFNAIWzwCNckBfJJAFwE8AHYWeAWXzbYCWIAOaVkaKAG04kAHToAugC4o8KsABOAblKpp8WWWVQAzkw1DhOujubtOMiAGlgLAGr4ANmE45xaaSghKABrVwB7ADMuSF5+S2N-CVQwlhUYHWS0ADcvH3SePkERaQVMtBt6fUgyxgB6OtN8CE58Eyh8KnDs4CIoKjAmKAB3ASYACygAEwFIyM1QIdSTOw4YiAB5EGAAFWHwsV0pGCCQUIjoxzji4USjiXDt9PKspn2C2KLLUpeoSrpqhBakhImAQABjJgCR6hbI7cJbXb7AAUAA8Ps5XB5vMAAJQYxF7A5JILRNGyVLYLA4RzyXFQEkScGPMyqSAqNSaSio2S5HFaKANKCsNYCdpsDThDgaTwsVT4DSS4bAKb3NDMkAmcKeYCyTzhYTI+C4350KDATwmTizKDkynUmkGMj0xnqllDMwaFSeyzc3l5YACoUi63iyXS2XyxXhZWqrKoDVanV6g3Iz0mo4MCRCjTjdpiqCJgRTBZTfpynYAZQ67QQUEewAxAre4W95l9AB82RB1No-n0hGZgPgy1EoBBwhpOCYOODZgJwetCfsjomhg2iQTtkTDvH608oDzUiQ9y2VDy+T5M78p0wwBozhv9tYkEA)\r\n\r\n### üíª Code\r\n\r\n<!-- Please post the relevant code sample here as well-->\r\n```ts\r\nenum Enum {\r\n    A = \"a\",\r\n    B = \"b\"\r\n}\r\n\r\ntype EnumMapping = {\r\n    [Enum.A]: number;\r\n    [Enum.B]: string;\r\n};\r\n\r\ntype EnumKeyValue = {\r\n    [E in keyof EnumMapping]: {\r\n        key: E;\r\n        value: EnumMapping[E];\r\n    };\r\n}[Enum];\r\n\r\n// same as above, but with different keys\r\ntype EnumOneTwo = {\r\n    [E in keyof EnumMapping]: {\r\n        one: E;\r\n        two: EnumMapping[E];\r\n    };\r\n}[Enum];\r\n\r\nfunction kvToOneTwo(x: EnumKeyValue): EnumOneTwo {\r\n    if (x.key === Enum.A) {\r\n        const num: number = x.value; // type is properly narrowed\r\n        console.log(num);\r\n    } else if (x.key === Enum.B) {\r\n        const str: string = x.value; // type is properly narrowed\r\n        console.log(str);\r\n    }\r\n    // rhs is considered by TS as { one: Enum; two: string | number; }, instead of more specific EnumOneTwo\r\n    const oneTwo: EnumOneTwo = {\r\n        one: x.key,\r\n        two: x.value\r\n    };\r\n    return oneTwo;\r\n}\r\n```\r\n\r\n### üôÅ Actual behavior\r\n\r\n```\r\nType '{ one: Enum; two: string | number; }' is not assignable to type 'EnumOneTwo'.\r\n  Type '{ one: Enum; two: string | number; }' is not assignable to type '{ one: Enum.B; two: string; }'.\r\n    Types of property 'one' are incompatible.\r\n      Type 'Enum' is not assignable to type 'Enum.B'.\r\n        Type 'Enum.A' is not assignable to type 'Enum.B'.(2322)\r\n```\r\n\r\n### üôÇ Expected behavior\r\n\r\nType info from `EnumKeyValue` is preserved when mapped to `EnumOneTwo` and code compiles without issues.\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48922/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48922/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48918","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48918/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48918/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48918/events","html_url":"https://github.com/microsoft/TypeScript/issues/48918","id":1223132967,"node_id":"I_kwDOAT9aAc5I54cn","number":48918,"title":"Reflect: jsdoc about `Reflect.set`","user":{"login":"dev-itsheng","id":10683193,"node_id":"MDQ6VXNlcjEwNjgzMTkz","avatar_url":"https://avatars.githubusercontent.com/u/10683193?v=4","gravatar_id":"","url":"https://api.github.com/users/dev-itsheng","html_url":"https://github.com/dev-itsheng","followers_url":"https://api.github.com/users/dev-itsheng/followers","following_url":"https://api.github.com/users/dev-itsheng/following{/other_user}","gists_url":"https://api.github.com/users/dev-itsheng/gists{/gist_id}","starred_url":"https://api.github.com/users/dev-itsheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dev-itsheng/subscriptions","organizations_url":"https://api.github.com/users/dev-itsheng/orgs","repos_url":"https://api.github.com/users/dev-itsheng/repos","events_url":"https://api.github.com/users/dev-itsheng/events{/privacy}","received_events_url":"https://api.github.com/users/dev-itsheng/received_events","type":"User","site_admin":false},"labels":[{"id":113971155,"node_id":"MDU6TGFiZWwxMTM5NzExNTU=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75","default":false,"description":"An idea for TypeScript"},{"id":151698898,"node_id":"MDU6TGFiZWwxNTE2OTg4OTg=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Domain:%20lib.d.ts","name":"Domain: lib.d.ts","color":"c7def8","default":false,"description":"The issue relates to the different libraries shipped with TypeScript"},{"id":373477802,"node_id":"MDU6TGFiZWwzNzM0Nzc4MDI=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Awaiting%20More%20Feedback","name":"Awaiting More Feedback","color":"556677","default":false,"description":"This means we'd like to hear from more people who would be helped by this feature"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-05-02T17:17:28Z","updated_at":"2022-05-03T18:20:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"# lib Update Request\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n\r\n  Are you here for one of these commonly-requested lib changes?\r\n    * Object.keys - see https://stackoverflow.com/questions/55012174/\r\n    * Array methods - see https://github.com/microsoft/TypeScript/issues/36554\r\n    * parseInt, parseFloat, isFinite, isNaN, etc. - see https://github.com/microsoft/TypeScript/issues/4002\r\n\r\n  The DOM lib is maintained elsewhere and you can skip a step by filing issues/PRs for the DOM at that repo.\r\n  See https://github.com/microsoft/TypeScript-DOM-lib-generator\r\n-->\r\n\r\n## Configuration Check\r\n\r\n<!--\r\n  If you're missing common new methods like Array.includes, you may have a misconfigured project.\r\n  Try setting `lib: \"es2020\"` and checking whether the type you want is present.\r\n  You can diagnose further by running `tsc` with `--listFilesOnly` or `--showConfig`.\r\n\r\n  Conversely, if you are seeing built-in methods you expect to *not* see, check your 'lib' setting\r\n  or review your dependencies for lib/reference directives that might be polluting\r\n  your global scope. This is common when using the 'node' type library. See https://github.com/microsoft/TypeScript/issues/40184\r\n\r\n  Replace the text below:\r\n-->\r\nMy compilation *target* is `ES2015` and my *lib* is `the default`.\r\n\r\n## Missing / Incorrect Definition\r\n\r\nWhen I use `Reflect.set` to set a property on an object, I realize the unusual hint from TypeScript:\r\n\r\n<details>\r\n    <summary>\r\n    Here is a screenshot from the TypeScript playground.\r\n    </summary>\r\n    <img width=\"595\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10683193/166293052-d8e31dda-f0b4-4720-871f-b74ae9e57f99.png\">\r\n\r\n<img width=\"622\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10683193/166293077-08ddec0c-e87e-403f-a5ed-7e3e464cd620.png\">\r\n\r\n<img width=\"666\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10683193/166293110-80a0cb44-850f-447e-8357-1a96cbb7831d.png\">\r\n\r\n<img width=\"734\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10683193/166293175-79137ad0-0c16-41b5-84d4-b6033fabb2a7.png\">\r\n</details>\r\n\r\nWhen passing in the third parameter, the hint is lost.\r\n\r\nBecause of the experience of Issue https://github.com/microsoft/TypeScript/issues/48557, I realized that this may be a JSDoc problem again, so I looked at the source code and found that there is indeed one parameter definition missing.\r\n\r\nNext I will try to fix it.\r\n\r\n<!--\r\n  What property, method, function, etc is missing or incorrect?\r\n-->\r\n\r\n## Sample Code\r\n\r\n```typescript\r\nconst obj = {};\r\n\r\nReflect.set(obj, 'key', 'value');\r\n```\r\n\r\n\r\n\r\n<!--\r\n  What's some code using this that should work, but doesn't?\r\n-->\r\n\r\n## Documentation Link\r\n\r\n<!--\r\n  Link to relevant documentation (e.g. MDN, W3C, ECMAScript Spec) to consult for this property.\r\n  Note that lib.dom.d.ts intentionally does not include browser-specific extensions\r\n   or early experimental features.\r\n-->\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48918/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48918/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48917","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48917/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48917/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48917/events","html_url":"https://github.com/microsoft/TypeScript/issues/48917","id":1223107695,"node_id":"I_kwDOAT9aAc5I5yRv","number":48917,"title":"Record from noUncheckedIndexedAccess: false can't be expressed when noUncheckedIndexedAccess: true","user":{"login":"safareli","id":1932383,"node_id":"MDQ6VXNlcjE5MzIzODM=","avatar_url":"https://avatars.githubusercontent.com/u/1932383?v=4","gravatar_id":"","url":"https://api.github.com/users/safareli","html_url":"https://github.com/safareli","followers_url":"https://api.github.com/users/safareli/followers","following_url":"https://api.github.com/users/safareli/following{/other_user}","gists_url":"https://api.github.com/users/safareli/gists{/gist_id}","starred_url":"https://api.github.com/users/safareli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/safareli/subscriptions","organizations_url":"https://api.github.com/users/safareli/orgs","repos_url":"https://api.github.com/users/safareli/repos","events_url":"https://api.github.com/users/safareli/events{/privacy}","received_events_url":"https://api.github.com/users/safareli/received_events","type":"User","site_admin":false},"labels":[{"id":113971226,"node_id":"MDU6TGFiZWwxMTM5NzEyMjY=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7","default":false,"description":"An existing issue was already created"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-05-02T16:48:58Z","updated_at":"2022-05-03T19:32:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"\r\n# Suggestion\r\n\r\nLike with  ways for adding and removing optionality form properties `?/-`  there seams to be a need to remove the special undefinedness of properties introduced in noUncheckedIndexedAccess:true\r\n\r\n## üîç Search Terms\r\n\r\nnoUncheckedIndexedAccess Record Array\r\n\r\n## ‚úÖ Viability Checklist\r\n\r\n<!--\r\n   Suggestions that don't meet all these criteria are very, very unlikely to be accepted.\r\n   We always recommend reviewing the TypeScript design goals before investing time writing\r\n   a proposal for ideas outside the scope of the project.\r\n-->\r\nMy suggestion meets these guidelines:\r\n\r\n* [X] This wouldn't be a breaking change in existing TypeScript/JavaScript code\r\n* [X] This wouldn't change the runtime behavior of existing JavaScript code\r\n* [X] This could be implemented without emitting different JS based on the types of the expressions\r\n* [X] This isn't a runtime feature (e.g. library functionality, non-ECMAScript syntax with JavaScript output, new syntax sugar for JS, etc.)\r\n* [X] This feature would agree with the rest of [TypeScript's Design Goals](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals).\r\n\r\n\r\n\r\n## üìÉ Motivating Example\r\n\r\n\r\nWith `noUncheckedIndexedAccess:false` we have a notion of `Record` that defines values, for all the possible properties. In practice there are not many actual values like that. Point of`noUncheckedIndexedAccess:true` was to automatically add `| undefined` type to result of property access so we are more type-safe automatically. \r\n\r\nThe main TypeSafe use-case for the records which do have value for any possible key are Proxies. And looks like we have lost a way to express the those properly with `noUncheckedIndexedAccess:true`\r\n\r\n\r\n## üíª Use Cases\r\nImagine \r\n```ts\r\nconst val = new Proxy<{[k in string]: string}>({}, {\r\n  get: (_, p) => p.toString().toUpperCase()\r\n});\r\n\r\nconst foo = val.foo\r\n```\r\n\r\nwith `noUncheckedIndexedAccess:false`, typer of `foo` is `string` tho with `noUncheckedIndexedAccess:true`, `foo` has type: `string | undefined` which is not correct.  here we know 100% that any value we read from `val`  via property access, must be `string`, but it can't be expressed using Typescript when `noUncheckedIndexedAccess:true`.\r\n\r\n\r\nWe can visualize what we lost using this table:\r\n\r\n```\r\n| noUncheckedIndexedAccess:false | Record<string,string> | Record<string,string | undefiend> | \r\n| noUncheckedIndexedAccess:true  | _____________________ | Record<string,string>             |\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48917/reactions","total_count":2,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":1},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48917/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48914","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48914/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48914/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48914/events","html_url":"https://github.com/microsoft/TypeScript/issues/48914","id":1222982342,"node_id":"I_kwDOAT9aAc5I5TrG","number":48914,"title":" error TS2502: 'thisArg' is referenced directly or indirectly in its own type annotation with tsc 4.6.4","user":{"login":"simllll","id":5757263,"node_id":"MDQ6VXNlcjU3NTcyNjM=","avatar_url":"https://avatars.githubusercontent.com/u/5757263?v=4","gravatar_id":"","url":"https://api.github.com/users/simllll","html_url":"https://github.com/simllll","followers_url":"https://api.github.com/users/simllll/followers","following_url":"https://api.github.com/users/simllll/following{/other_user}","gists_url":"https://api.github.com/users/simllll/gists{/gist_id}","starred_url":"https://api.github.com/users/simllll/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/simllll/subscriptions","organizations_url":"https://api.github.com/users/simllll/orgs","repos_url":"https://api.github.com/users/simllll/repos","events_url":"https://api.github.com/users/simllll/events{/privacy}","received_events_url":"https://api.github.com/users/simllll/received_events","type":"User","site_admin":false},"labels":[{"id":113970366,"node_id":"MDU6TGFiZWwxMTM5NzAzNjY=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21","default":false,"description":"A bug in TypeScript"},{"id":114001888,"node_id":"MDU6TGFiZWwxMTQwMDE4ODg=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"80e580","default":false,"description":"A PR has been merged for this issue"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-05-02T14:48:16Z","updated_at":"2022-05-03T16:35:49Z","closed_at":"2022-05-03T16:35:17Z","author_association":"NONE","active_lock_reason":null,"body":"# Bug Report\r\n\r\n### üîé Search Terms\r\n\r\nts2502, lib.es.5\r\n\r\n### üïó Version & Regression Information\r\n\r\nworks with tsc 4.6.3, but not anymore the latest one (4.6.4).\r\n\r\nNightly version works!\r\n\r\n- This changed between versions 4.6.3 and 4.6.4\r\n\r\n### üôÅ Actual behavior\r\n\r\nrunning tsc results into:\r\n```\r\nnode_modules/typescript/lib/lib.es5.d.ts:352:22 - error TS2502: 'thisArg' is referenced directly or indirectly in its own type annotation.\r\n\r\n352     bind<T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>;\r\n                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n\r\nFound 1 error in node_modules/typescript/lib/lib.es5.d.ts:352\r\n```\r\n\r\ntsconfig.json:\r\n```\r\n{\r\n\t\"compilerOptions\": {\r\n\t\t\"outDir\": \"./dist\",\r\n\t\t\"rootDir\": \"./src\",\r\n\r\n\t\t// target settings for node js\r\n\t\t\"module\": \"ES2020\",\r\n\t\t\"target\": \"ES2021\",\r\n\t\t\"lib\": [\"ES2021\"],\r\n\r\n\t\t// for CommonJS module imports\r\n\t\t\"allowSyntheticDefaultImports\": true,\r\n\r\n\t\t// other best practice configs\r\n\t\t\"moduleResolution\": \"node\",\r\n\t\t\"strict\": true,\r\n\t\t\"noImplicitAny\": false, // <-- get rid of this!\r\n\t\t\"emitDecoratorMetadata\": true,\r\n\t\t\"composite\": true,\r\n\t\t\"experimentalDecorators\": true,\r\n\t\t\"strictPropertyInitialization\": false,\r\n\t\t\"resolveJsonModule\": true,\r\n\t\t\"sourceMap\": true,\r\n\t\t\"isolatedModules\": false,\r\n\t\t\"declaration\": true\r\n\t},\r\n\t\"exclude\": [\"node_modules\", \"**/__tests__\"],\r\n\t\"include\": [\"./src\"]\r\n}\r\n\r\n```\r\n### üôÇ Expected behavior\r\n\r\nshould work, it actually does (already again?) in the nightly, but I couldn't find any issue and therefore wanted to create one in case other people are stumpling on this too. Please feel free to close it, if this is already known or fixed by intention ;-).","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48914/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48914/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48912","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48912/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48912/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48912/events","html_url":"https://github.com/microsoft/TypeScript/issues/48912","id":1222789801,"node_id":"I_kwDOAT9aAc5I4kqp","number":48912,"title":"Type definition for `fractionalSecondDigits` in Intl.DateTimeFormatOptions has incorrect `0`.","user":{"login":"mstssk","id":500072,"node_id":"MDQ6VXNlcjUwMDA3Mg==","avatar_url":"https://avatars.githubusercontent.com/u/500072?v=4","gravatar_id":"","url":"https://api.github.com/users/mstssk","html_url":"https://github.com/mstssk","followers_url":"https://api.github.com/users/mstssk/followers","following_url":"https://api.github.com/users/mstssk/following{/other_user}","gists_url":"https://api.github.com/users/mstssk/gists{/gist_id}","starred_url":"https://api.github.com/users/mstssk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mstssk/subscriptions","organizations_url":"https://api.github.com/users/mstssk/orgs","repos_url":"https://api.github.com/users/mstssk/repos","events_url":"https://api.github.com/users/mstssk/events{/privacy}","received_events_url":"https://api.github.com/users/mstssk/received_events","type":"User","site_admin":false},"labels":[{"id":113970366,"node_id":"MDU6TGFiZWwxMTM5NzAzNjY=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21","default":false,"description":"A bug in TypeScript"},{"id":117630704,"node_id":"MDU6TGFiZWwxMTc2MzA3MDQ=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Help%20Wanted","name":"Help Wanted","color":"3178c6","default":false,"description":"You can do this"},{"id":265374716,"node_id":"MDU6TGFiZWwyNjUzNzQ3MTY=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Good%20First%20Issue","name":"Good First Issue","color":"7944ba","default":false,"description":"Well scoped, documented and has the green light"},{"id":1564676978,"node_id":"MDU6TGFiZWwxNTY0Njc2OTc4","url":"https://api.github.com/repos/microsoft/TypeScript/labels/lib%20update","name":"lib update","color":"561584","default":false,"description":"PR modifies files in the `lib` folder"}],"state":"open","locked":false,"assignee":{"login":"sandersn","id":293473,"node_id":"MDQ6VXNlcjI5MzQ3Mw==","avatar_url":"https://avatars.githubusercontent.com/u/293473?v=4","gravatar_id":"","url":"https://api.github.com/users/sandersn","html_url":"https://github.com/sandersn","followers_url":"https://api.github.com/users/sandersn/followers","following_url":"https://api.github.com/users/sandersn/following{/other_user}","gists_url":"https://api.github.com/users/sandersn/gists{/gist_id}","starred_url":"https://api.github.com/users/sandersn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sandersn/subscriptions","organizations_url":"https://api.github.com/users/sandersn/orgs","repos_url":"https://api.github.com/users/sandersn/repos","events_url":"https://api.github.com/users/sandersn/events{/privacy}","received_events_url":"https://api.github.com/users/sandersn/received_events","type":"User","site_admin":false},"assignees":[{"login":"sandersn","id":293473,"node_id":"MDQ6VXNlcjI5MzQ3Mw==","avatar_url":"https://avatars.githubusercontent.com/u/293473?v=4","gravatar_id":"","url":"https://api.github.com/users/sandersn","html_url":"https://github.com/sandersn","followers_url":"https://api.github.com/users/sandersn/followers","following_url":"https://api.github.com/users/sandersn/following{/other_user}","gists_url":"https://api.github.com/users/sandersn/gists{/gist_id}","starred_url":"https://api.github.com/users/sandersn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sandersn/subscriptions","organizations_url":"https://api.github.com/users/sandersn/orgs","repos_url":"https://api.github.com/users/sandersn/repos","events_url":"https://api.github.com/users/sandersn/events{/privacy}","received_events_url":"https://api.github.com/users/sandersn/received_events","type":"User","site_admin":false}],"milestone":{"url":"https://api.github.com/repos/microsoft/TypeScript/milestones/163","html_url":"https://github.com/microsoft/TypeScript/milestone/163","labels_url":"https://api.github.com/repos/microsoft/TypeScript/milestones/163/labels","id":7849878,"node_id":"MI_kwDOAT9aAc4Ad8eW","number":163,"title":"TypeScript 4.8.0","description":null,"creator":{"login":"DanielRosenwasser","id":972891,"node_id":"MDQ6VXNlcjk3Mjg5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/972891?v=4","gravatar_id":"","url":"https://api.github.com/users/DanielRosenwasser","html_url":"https://github.com/DanielRosenwasser","followers_url":"https://api.github.com/users/DanielRosenwasser/followers","following_url":"https://api.github.com/users/DanielRosenwasser/following{/other_user}","gists_url":"https://api.github.com/users/DanielRosenwasser/gists{/gist_id}","starred_url":"https://api.github.com/users/DanielRosenwasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DanielRosenwasser/subscriptions","organizations_url":"https://api.github.com/users/DanielRosenwasser/orgs","repos_url":"https://api.github.com/users/DanielRosenwasser/repos","events_url":"https://api.github.com/users/DanielRosenwasser/events{/privacy}","received_events_url":"https://api.github.com/users/DanielRosenwasser/received_events","type":"User","site_admin":false},"open_issues":24,"closed_issues":0,"state":"open","created_at":"2022-04-06T23:13:42Z","updated_at":"2022-05-03T00:33:40Z","due_on":null,"closed_at":null},"comments":0,"created_at":"2022-05-02T11:46:59Z","updated_at":"2022-05-03T00:33:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"# lib Update Request\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n\r\n  Are you here for one of these commonly-requested lib changes?\r\n    * Object.keys - see https://stackoverflow.com/questions/55012174/\r\n    * Array methods - see https://github.com/microsoft/TypeScript/issues/36554\r\n    * parseInt, parseFloat, isFinite, isNaN, etc. - see https://github.com/microsoft/TypeScript/issues/4002\r\n\r\n  The DOM lib is maintained elsewhere and you can skip a step by filing issues/PRs for the DOM at that repo.\r\n  See https://github.com/microsoft/TypeScript-DOM-lib-generator\r\n-->\r\n\r\n## Configuration Check\r\n\r\n<!--\r\n  If you're missing common new methods like Array.includes, you may have a misconfigured project.\r\n  Try setting `lib: \"es2020\"` and checking whether the type you want is present.\r\n  You can diagnose further by running `tsc` with `--listFilesOnly` or `--showConfig`.\r\n\r\n  Conversely, if you are seeing built-in methods you expect to *not* see, check your 'lib' setting\r\n  or review your dependencies for lib/reference directives that might be polluting\r\n  your global scope. This is common when using the 'node' type library. See https://github.com/microsoft/TypeScript/issues/40184\r\n\r\n  Replace the text below:\r\n-->\r\nMy compilation *target* is `es2016` and my *lib* is `es2021`.\r\n\r\n## Missing / Incorrect Definition\r\n\r\n<!--\r\n  What property, method, function, etc is missing or incorrect?\r\n-->\r\n\r\n`fractionalSecondDigits` in Intl.DateTimeFormatOptions should not have `0`.\r\nHowever current type definition is `fractionalSecondDigits?: 0 | 1 | 2 | 3 | undefined;`.\r\nhttps://github.com/microsoft/TypeScript/blob/v4.6.4/src/lib/es2021.intl.d.ts\r\n\r\n## Sample Code\r\n\r\n<!--\r\n  What's some code using this that should work, but doesn't?\r\n-->\r\n\r\n```ts\r\nIntl.DateTimeFormat(\"en-US\", { fractionalSecondDigits: 0 });\r\n// RangeError: fractionalSecondDigits value is out of range.\r\n```\r\n\r\nThis code throws RangeError on Chrome v101, Safari v15.4, Firefox v99 and Node.js v16,v17.\r\n\r\n## Documentation Link\r\n\r\n<!--\r\n  Link to relevant documentation (e.g. MDN, W3C, ECMAScript Spec) to consult for this property.\r\n  Note that lib.dom.d.ts intentionally does not include browser-specific extensions\r\n   or early experimental features.\r\n-->\r\n\r\n`fractionalSecondDigits` values are 1, 2 or 3 in ECMAScript¬Æ 2021 Internationalization API Specification.\r\nhttps://402.ecma-international.org/8.0/#sec-datetimeformat-abstracts\r\n\r\nRelated conversation at https://github.com/tc39/ecma402/issues/590\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48912/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48912/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48915","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48915/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48915/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48915/events","html_url":"https://github.com/microsoft/TypeScript/issues/48915","id":1223018154,"node_id":"I_kwDOAT9aAc5I5caq","number":48915,"title":"IntelliSense/autocomplete doesn't work properly inside object literals","user":{"login":"ArturAbdullin","id":30603428,"node_id":"MDQ6VXNlcjMwNjAzNDI4","avatar_url":"https://avatars.githubusercontent.com/u/30603428?v=4","gravatar_id":"","url":"https://api.github.com/users/ArturAbdullin","html_url":"https://github.com/ArturAbdullin","followers_url":"https://api.github.com/users/ArturAbdullin/followers","following_url":"https://api.github.com/users/ArturAbdullin/following{/other_user}","gists_url":"https://api.github.com/users/ArturAbdullin/gists{/gist_id}","starred_url":"https://api.github.com/users/ArturAbdullin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ArturAbdullin/subscriptions","organizations_url":"https://api.github.com/users/ArturAbdullin/orgs","repos_url":"https://api.github.com/users/ArturAbdullin/repos","events_url":"https://api.github.com/users/ArturAbdullin/events{/privacy}","received_events_url":"https://api.github.com/users/ArturAbdullin/received_events","type":"User","site_admin":false},"labels":[{"id":611777722,"node_id":"MDU6TGFiZWw2MTE3Nzc3MjI=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Needs%20Investigation","name":"Needs Investigation","color":"DDDDDD","default":false,"description":"This issue needs a team member to investigate its status."}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-05-02T11:25:13Z","updated_at":"2022-05-03T00:31:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"<!-- ‚ö†Ô∏è‚ö†Ô∏è Do Not Delete This! bug_report_template ‚ö†Ô∏è‚ö†Ô∏è -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- üïÆ Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions -->\r\n<!-- üîé Search existing issues to avoid creating duplicates. -->\r\n<!-- üß™ Test using the latest Insiders build to see if your issue has already been fixed: https://code.visualstudio.com/insiders/ -->\r\n<!-- üí° Instead of creating your report here, use 'Report Issue' from the 'Help' menu in VS Code to pre-fill useful information. -->\r\n<!-- üîß Launch with `code --disable-extensions` to check. -->\r\nDoes this issue occur when all extensions are disabled?: Yes\r\n\r\n<!-- ü™ì If you answered No above, use 'Help: Start Extension Bisect' from Command Palette to try to identify the cause. -->\r\n<!-- üì£ Issues caused by an extension need to be reported directly to the extension publisher. The 'Help > Report Issue' dialog can assist with this. -->\r\n- VS Code Version: 1.66.2 (system setup)\r\n- OS Version: Microsoft Windows Version 21H1 (OS Build 19043.1526)\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create a new object using object literal with two or more properties and a method:\r\n`let obj = { x: 10, y: [1], fun: function () {}`\r\n2. Now, inside the method, addressing to the properties using `this` keyword is recognised by the IntelliSense/autocomplete.\r\n`this.` - results in\r\n![step2](https://user-images.githubusercontent.com/30603428/166145489-f82f8070-f374-412d-9785-23fa6421ccf1.png)\r\n3. Change the value of a property inside the method, for instance\r\n`let obj = { x: 10, y: [1], fun: function () {`**`this.x = 5;`**`}}`\r\n4. Now, only addressing to the property `x` is recognised by the IntelliSense/autocomplete:\r\n![step4](https://user-images.githubusercontent.com/30603428/166146075-c45a47a9-a466-4fea-96d2-918e711be379.png)\r\n    Even though `y` property is an array, IntelliSense won't show its methods and properties:\r\n![step4 2](https://user-images.githubusercontent.com/30603428/166224141-5307b146-36c2-428a-9e40-0aed82f9ad9d.png)\r\n\r\n<details><summary>System info</summary>\r\n<table>\r\n  <tr>\r\n    <td>CPUs</td>\r\n    <td>Intel(R) Core(TM) i5-6600 CPU @ 3.30GHz (4 x 3312)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>GPU Status</td>\r\n    <td>2d_canvas: enabled canvas_oop_rasterization: disabled_off direct_rendering_display_compositor: disabled_off_ok gpu_compositing: enabled multiple_raster_threads: enabled_on oop_rasterization: enabled opengl: enabled_on rasterization: enabled raw_draw: disabled_off_ok skia_renderer: enabled_on video_decode: enabled video_encode: enabled vulkan: disabled_off webgl: enabled webgl2: enabled</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Load (avg)</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td>Memory (System)</td>\r\n    <td>15.89GB (4.73GB free)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Process Argv</td>\r\n    <td>...\\vscode issue --crash-reporter-id 85c4d140-e4d5-49f1-8a5a-495612b0049f</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Screen Reader</td>\r\n    <td>no</td>\r\n  </tr>\r\n  <tr>\r\n    <td>VM</td>\r\n    <td>0%</td>\r\n  </tr>\r\n</table>\r\n</details>\r\nExtensions: none\r\n<br></br>\r\n<details><summary>A/B experiment info</summary>\r\n<pre>\r\nvsliv368cf:30146710\r\nvsreu685:30147344\r\npython383:30185418\r\nvspor879:30202332\r\nvspor708:30202333\r\nvspor363:30204092\r\npythonvspyl392:30443607\r\npythontb:30283811\r\npythonvspyt551:30345470\r\npythonptprofiler:30281270\r\nvshan820:30294714\r\nvstes263:30335439\r\nvscorecescf:30445987\r\npythondataviewer:30285071\r\nvscod805cf:30301675\r\npythonvspyt200:30340761\r\nbinariesv615:30325510\r\nbridge0708:30335490\r\nbridge0723:30353136\r\nvsaa593:30376534\r\nvsc1dst:30438360\r\npythonvs932:30410667\r\nwslgetstarted:30449410\r\npythonvsnew555:30457759\r\nvscscmwlcmt:30465135\r\ncppdebugcf:30475217\r\n</pre>\r\n</details>","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48915/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48915/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48911","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48911/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48911/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48911/events","html_url":"https://github.com/microsoft/TypeScript/issues/48911","id":1222630369,"node_id":"I_kwDOAT9aAc5I39vh","number":48911,"title":"implement tagged template string support for inlining d.ts","user":{"login":"frank-dspeed","id":7239575,"node_id":"MDQ6VXNlcjcyMzk1NzU=","avatar_url":"https://avatars.githubusercontent.com/u/7239575?v=4","gravatar_id":"","url":"https://api.github.com/users/frank-dspeed","html_url":"https://github.com/frank-dspeed","followers_url":"https://api.github.com/users/frank-dspeed/followers","following_url":"https://api.github.com/users/frank-dspeed/following{/other_user}","gists_url":"https://api.github.com/users/frank-dspeed/gists{/gist_id}","starred_url":"https://api.github.com/users/frank-dspeed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frank-dspeed/subscriptions","organizations_url":"https://api.github.com/users/frank-dspeed/orgs","repos_url":"https://api.github.com/users/frank-dspeed/repos","events_url":"https://api.github.com/users/frank-dspeed/events{/privacy}","received_events_url":"https://api.github.com/users/frank-dspeed/received_events","type":"User","site_admin":false},"labels":[{"id":113971155,"node_id":"MDU6TGFiZWwxMTM5NzExNTU=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75","default":false,"description":"An idea for TypeScript"},{"id":117630901,"node_id":"MDU6TGFiZWwxMTc2MzA5MDE=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677","default":false,"description":"The issue was declined as something which matches the TypeScript vision"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-05-02T08:36:07Z","updated_at":"2022-05-03T16:12:33Z","closed_at":"2022-05-02T23:32:12Z","author_association":"NONE","active_lock_reason":null,"body":"# Suggestion\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n-->\r\n\r\n## üîç Search Terms\r\n\r\ntagged template string literal declaration inline d.ts js javascript ecmascript\r\n## ‚úÖ Viability Checklist\r\n\r\n<!--\r\n   Suggestions that don't meet all these criteria are very, very unlikely to be accepted.\r\n   We always recommend reviewing the TypeScript design goals before investing time writing\r\n   a proposal for ideas outside the scope of the project.\r\n-->\r\nMy suggestion meets these guidelines:\r\n\r\n* [x] This wouldn't be a breaking change in existing TypeScript/JavaScript code\r\n* [x] This wouldn't change the runtime behavior of existing JavaScript code\r\n* [x] This could be implemented without emitting different JS based on the types of the expressions\r\n* [x] This isn't a runtime feature (e.g. library functionality, non-ECMAScript syntax with JavaScript output, new syntax sugar for JS, etc.)\r\n* [x] This feature would agree with the rest of [TypeScript's Design Goals](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals).\r\n\r\n\r\n## ‚≠ê Suggestion\r\n\r\nthe jsdoc format is not multi-line capable out of history with tagged template strings for example ``` html`` ```\r\nlets implement typescriptDefinition`` or something similar uniqe make it a exclusive word and allow common typescript declaration syntax inside that. also rank that higher then external .d.ts\r\n\r\n## üìÉ Motivating Example\r\n\r\nwe can more easy bundle our types directly inside the resulting .js file without additional lockups while we can transpile them away if needed or even use them to build runtime checks. \r\n\r\na tagged template string literal is simply a function that accepts unlimited arguments so it is a noOp by default while it is parse able it is not as light wight as a comment but it is still not adding much overhead. \r\n\r\n## üíª Use Cases\r\n inline typescript declaration syntax where jsdoc is not the best solution or even impossible. also more easy Adopt and preserve typescript syntax when transpiling or bundling. The need for a extra file is always complicated and .ts files are simply not run able without removing the typescript boilerplate. \r\n\r\nthis should close the gap maybe.\r\nexample.js\r\n```ts\r\ntypescriptDefinition`export function getArrayLength(arr: any[]): number;\r\nexport const maxInterval: 12;`\r\n\r\nconst maxInterval = 12;\r\nfunction getArrayLength(arr) {\r\n  return arr.length;\r\n}\r\nmodule.exports = {\r\n  getArrayLength,\r\n  maxInterval,\r\n};\r\n```\r\n\r\nexample2.js\r\n```ts\r\ntypescriptDefinition`export const maxInterval: 12;`;\r\nconst maxInterval = 12;\r\n\r\ntypescriptDefinition`export function getArrayLength(arr: any[]): number;`;\r\nfunction getArrayLength(arr) {\r\n  return arr.length;\r\n}\r\n\r\nmodule.exports = {\r\n  getArrayLength,\r\n  maxInterval,\r\n};\r\n```\r\n\r\nLocal only type definition example:\r\nexample3.js\r\n```ts\r\ntypescriptDefinition`const _private: 33;`;\r\nconst _private = 33\r\n```\r\n\r\n\r\njs files containing the typescriptDefinition tagged template string literal should get handled like js files but with already existing.d.ts file if there is a d.ts file simply rank it lower then the existing local definitions and merge none existing.\r\n\r\nto illustrate that lets take example3.js and translate it to its representation 1:1\r\n\r\n```ts\r\ntypescriptDefinition`const _private: 33;`; // example3.d.ts\r\nconst _private = 33 // example3.js\r\n```\r\n\r\n\r\n## Missing part\r\nwe need to create the taggedTemplateStringLiteral with a import able no oOp helper like\r\nnode_modules/typescript/definition.js\r\n```\r\n/** @type {(args: any)=>void} */\r\nexport const typescriptDefinition = (...args) => {};\r\n```\r\nso that it exists in userSpace without the need for a global so a bit like import type {}\r\n\r\n```js\r\nimport { typescriptDefinition } from 'typescript/definition';\r\ntypescriptDefinition`const _private: 33;`; // example3.d.ts\r\nconst _private = 33 // example3.js\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48911/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48911/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48916","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48916/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48916/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48916/events","html_url":"https://github.com/microsoft/TypeScript/issues/48916","id":1223019265,"node_id":"I_kwDOAT9aAc5I5csB","number":48916,"title":"refactor import statements to import more specific paths","user":{"login":"trusktr","id":297678,"node_id":"MDQ6VXNlcjI5NzY3OA==","avatar_url":"https://avatars.githubusercontent.com/u/297678?v=4","gravatar_id":"","url":"https://api.github.com/users/trusktr","html_url":"https://github.com/trusktr","followers_url":"https://api.github.com/users/trusktr/followers","following_url":"https://api.github.com/users/trusktr/following{/other_user}","gists_url":"https://api.github.com/users/trusktr/gists{/gist_id}","starred_url":"https://api.github.com/users/trusktr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/trusktr/subscriptions","organizations_url":"https://api.github.com/users/trusktr/orgs","repos_url":"https://api.github.com/users/trusktr/repos","events_url":"https://api.github.com/users/trusktr/events{/privacy}","received_events_url":"https://api.github.com/users/trusktr/received_events","type":"User","site_admin":false},"labels":[{"id":113971155,"node_id":"MDU6TGFiZWwxMTM5NzExNTU=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75","default":false,"description":"An idea for TypeScript"},{"id":373477802,"node_id":"MDU6TGFiZWwzNzM0Nzc4MDI=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Awaiting%20More%20Feedback","name":"Awaiting More Feedback","color":"556677","default":false,"description":"This means we'd like to hear from more people who would be helped by this feature"},{"id":486161109,"node_id":"MDU6TGFiZWw0ODYxNjExMDk=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Domain:%20Refactorings","name":"Domain: Refactorings","color":"5319e7","default":false,"description":"e.g. extract to constant or function, rename symbol"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-05-01T21:51:33Z","updated_at":"2022-05-03T00:30:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"<!-- ‚ö†Ô∏è‚ö†Ô∏è Do Not Delete This! feature_request_template ‚ö†Ô∏è‚ö†Ô∏è -->\r\n<!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ -->\r\n<!-- Please search existing issues to avoid creating duplicates. -->\r\n\r\n<!-- Describe the feature you'd like. -->\r\n\r\nIt would be great to have the ability to refactor an import so that it will import from a more specific path rather than an index. For example, given this code,\r\n\r\n```ts\r\nimport {Box} from 'three'\r\n```\r\n\r\na refactor option would let us make it more specific so that it imports `Box` directly from where it comes from (within certain limitations, f.e. only if the `package.json` `exports` field allows it):\r\n\r\n```ts\r\nimport {Box3} from 'three/src/math/Box3.js'\r\n```\r\n\r\nThis makes avoiding importing from index files easier, which is useful for avoiding to import a bunch of code that is not actually needed, especially in native environments with native ES modules (no tree shaking). Even so, build tools don't always tree shake, and if they do they can get it wrong, and build tools all tree shake in different ways requiring different conventions to be followed.\r\n\r\nAt the very least, it would be awesome to have a refactor option that is good for the common case: import as little as possible first (including build-less native ESM setups), _then_ optimize.\r\n\r\n## practical use case:\r\n\r\nConsider the import statement at the top of this file inside the `three` library that imports `from 'three'`:\r\n\r\nhttps://github.com/mrdoob/three.js/blob/r139/examples/jsm/controls/OrbitControls.js\r\n\r\nA common case (that I've seen people do in various projects across different companies in my career) is to copy this file into a local project and modify as needed.\r\n\r\nOne such modification is to convert the import statements from this,\r\n\r\n```js\r\nimport {\r\n\tEventDispatcher,\r\n\tMOUSE,\r\n\tQuaternion,\r\n\t// ...\r\n} from 'three';\r\n```\r\n\r\nto this:\r\n\r\n```js\r\nimport {EventDispatcher} from 'three/src/core/EventDispatcher.js'\r\nimport {MOUSE} from 'three/src/constants.js'\r\nimport {Quaternion} from 'three/src/math/Quaternion.js'\r\n// ...\r\n```\r\n\r\nin order to avoid bundling the _**entire whole**_ `three` library.\r\n\r\nThis is of course doable by hand.\r\n\r\nThis one gets a little more time consuming:\r\n\r\nhttps://github.com/mrdoob/three.js/blob/r139/examples/jsm/loaders/GLTFLoader.js\r\n\r\n## solution suggestion\r\n\r\nA simple refactor option like `Make all imports specific` would be awesome.\r\n\r\nIt would also be awesome to configure in VS Code settings to always auto complete most specific path when auto importing during an auto complete. F.e. typing `Quatern` then hitting tab would insert an import statement that import `from 'three/src/math/Quaternion.js'` instead of `from 'three'`.\r\n\r\n## considerations\r\n\r\n- When using node module resultion, if specific paths are not allowed by `package.json` `exports` field, then don't perform the refactor. This should operate only within the rules of module visibility.\r\n- If not using node module resolution (f.e. only file paths) then it would be fine to expand import paths to any local file (this might include `./node_modules` paths for some projects that have that folder).\r\n- other similar considerations...\r\n\r\n## Status quo\r\n\r\nCurrently VS Code auto completes import statements using the simplest import paths, which makes people's applications bloated by default.","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48916/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48916/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48907","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48907/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48907/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48907/events","html_url":"https://github.com/microsoft/TypeScript/issues/48907","id":1222137837,"node_id":"I_kwDOAT9aAc5I2Fft","number":48907,"title":"JSON: more general type of `JSON.parse()`","user":{"login":"dev-itsheng","id":10683193,"node_id":"MDQ6VXNlcjEwNjgzMTkz","avatar_url":"https://avatars.githubusercontent.com/u/10683193?v=4","gravatar_id":"","url":"https://api.github.com/users/dev-itsheng","html_url":"https://github.com/dev-itsheng","followers_url":"https://api.github.com/users/dev-itsheng/followers","following_url":"https://api.github.com/users/dev-itsheng/following{/other_user}","gists_url":"https://api.github.com/users/dev-itsheng/gists{/gist_id}","starred_url":"https://api.github.com/users/dev-itsheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dev-itsheng/subscriptions","organizations_url":"https://api.github.com/users/dev-itsheng/orgs","repos_url":"https://api.github.com/users/dev-itsheng/repos","events_url":"https://api.github.com/users/dev-itsheng/events{/privacy}","received_events_url":"https://api.github.com/users/dev-itsheng/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2022-05-01T12:16:21Z","updated_at":"2022-05-02T05:18:23Z","closed_at":"2022-05-02T05:18:22Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"# lib Update Request\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n\r\n  Are you here for one of these commonly-requested lib changes?\r\n    * Object.keys - see https://stackoverflow.com/questions/55012174/\r\n    * Array methods - see https://github.com/microsoft/TypeScript/issues/36554\r\n    * parseInt, parseFloat, isFinite, isNaN, etc. - see https://github.com/microsoft/TypeScript/issues/4002\r\n\r\n  The DOM lib is maintained elsewhere and you can skip a step by filing issues/PRs for the DOM at that repo.\r\n  See https://github.com/microsoft/TypeScript-DOM-lib-generator\r\n-->\r\n\r\n## Configuration Check\r\n\r\n<!--\r\n  If you're missing common new methods like Array.includes, you may have a misconfigured project.\r\n  Try setting `lib: \"es2020\"` and checking whether the type you want is present.\r\n  You can diagnose further by running `tsc` with `--listFilesOnly` or `--showConfig`.\r\n\r\n  Conversely, if you are seeing built-in methods you expect to *not* see, check your 'lib' setting\r\n  or review your dependencies for lib/reference directives that might be polluting\r\n  your global scope. This is common when using the 'node' type library. See https://github.com/microsoft/TypeScript/issues/40184\r\n\r\n  Replace the text below:\r\n-->\r\n\r\nMy compilation *target* is `ES2015` and my *lib* is `the default`.\r\n\r\n## Missing / Incorrect Definition\r\n\r\n<!--\r\n  What property, method, function, etc is missing or incorrect?\r\n-->\r\n\r\n`JSON.parse`„ÄÇ\r\n\r\n## Sample Code\r\n\r\n<!--\r\n  What's some code using this that should work, but doesn't?\r\n-->\r\n\r\nIn Node.js:\r\n\r\n```typescript\r\nimport fs from 'fs';\r\n\r\nconst packageJson = JSON.parse(fs.readFileSync('./package.json'));\r\n```\r\n\r\nTypeScript throw a new Error `TS2345: Argument of type 'Buffer' is not assignable to parameter of type 'string'`.\r\n\r\nBut it works.\r\n\r\nBecause according to the [ECMAScript 5 version of the documentation](https://262.ecma-international.org/5.1/#sec-15.12.2), `JSON.parse()`, when executed, will first convert the incoming parameters Call the `ToString` internal method.\r\n\r\nAnd according to [Node.js related code](https://github.com/nodejs/node/blob/master/lib/buffer.js#L784), the Buffer object will be converted to utf8 when calling `toString` string.\r\n\r\nThat is, this parameter can be of any type, for example:\r\n\r\n```javascript\r\nconst obj = {\r\n    toString() {\r\n        return '[1, 2, 3]'\r\n    }\r\n};\r\n\r\nconst arr = JSON.parse(obj);    // [1, 2, 3]\r\n```\r\n\r\nTypeScript still throw error:\r\n\r\n<img width=\"769\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10683193/166145319-0d278a0e-7f18-40a2-91c5-dad9dd678fab.png\">\r\n\r\nYou can also try it on [TypeScript PlayGround](https://www.typescriptlang.org/play?#code/MYewdgzgLgBCBGArGBeGBvAUDHMogGUoAnASzAHMAKASg210eIFMoBXYsGAcgG0BGADQwATMIDMAXW4McAX0xyA3JkyhIsAIbFiqGACkCAeQByAOgAO2iMyoJENJUA).\r\n\r\nI had to disable [an ESLint rule](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-json-parse-buffer.md) for the same reason.\r\n\r\n## Documentation Link\r\n\r\n<!--\r\n  Link to relevant documentation (e.g. MDN, W3C, ECMAScript Spec) to consult for this property.\r\n  Note that lib.dom.d.ts intentionally does not include browser-specific extensions\r\n   or early experimental features.\r\n-->\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48907/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48907/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48906","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48906/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48906/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48906/events","html_url":"https://github.com/microsoft/TypeScript/issues/48906","id":1222030247,"node_id":"I_kwDOAT9aAc5I1rOn","number":48906,"title":"Record<\"a\" | \"b\", number> incorrectly extends Record<number, string>","user":{"login":"Josh-Cena","id":55398995,"node_id":"MDQ6VXNlcjU1Mzk4OTk1","avatar_url":"https://avatars.githubusercontent.com/u/55398995?v=4","gravatar_id":"","url":"https://api.github.com/users/Josh-Cena","html_url":"https://github.com/Josh-Cena","followers_url":"https://api.github.com/users/Josh-Cena/followers","following_url":"https://api.github.com/users/Josh-Cena/following{/other_user}","gists_url":"https://api.github.com/users/Josh-Cena/gists{/gist_id}","starred_url":"https://api.github.com/users/Josh-Cena/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Josh-Cena/subscriptions","organizations_url":"https://api.github.com/users/Josh-Cena/orgs","repos_url":"https://api.github.com/users/Josh-Cena/repos","events_url":"https://api.github.com/users/Josh-Cena/events{/privacy}","received_events_url":"https://api.github.com/users/Josh-Cena/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-05-01T05:35:48Z","updated_at":"2022-05-04T05:09:06Z","closed_at":"2022-05-01T07:32:06Z","author_association":"NONE","active_lock_reason":null,"body":"# Bug Report\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n-->\r\n\r\n### üîé Search Terms\r\n\r\nstring literal mapped type extends number index signature \r\n\r\n### üïó Version & Regression Information\r\n\r\n<!-- When did you start seeing this bug occur?\r\n\r\n\"Bugs\" that have existed in TS for a long time are very likely to be FAQs; refer to\r\n  https://github.com/Microsoft/TypeScript/wiki/FAQ#common-bugs-that-arent-bugs\r\n\r\nIf possible, please try testing the nightly version of TS to see if it's already been fixed.\r\nFor npm: `typescript@next`\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n\r\nNote: The TypeScript Playground can be used to try older versions of TypeScript.\r\n\r\nPlease keep and fill in the line that best applies:\r\n-->\r\n\r\n- This is the behavior in every version I tried, and I reviewed the FAQ for entries about index signatures\r\n\r\n### ‚èØ Playground Link\r\n\r\n<!--\r\n  A link to a TypeScript Playground \"Share\" link which shows this behavior\r\n\r\n  The TypeScript Workbench can be used for more complex setups, try\r\n  https://www.typescriptlang.org/dev/bug-workbench/\r\n\r\n  As a last resort, you can link to a repo, but these will be slower for us to investigate.\r\n-->\r\n[Playground link with relevant code](https://www.typescriptlang.org/play?ts=4.6.2&ssl=24&ssc=8&pln=22&pc=8#code/C4TwDgpgBAKgjFAvFAShAxgewE4BMA8ARAIaFQA+UhARoQDRQB2ArgLbUTYB8UEAHsAiNcAZ1QYcBFu04MRwbAEtGAcx4B+KAgBcUAEwBuALAAoAPRmoVgHrrToSLD1JxWPPmkdschcrW8BIVFXSSJSCipaBk9ODS0oXUNTCysoW3twaBgAZhc0NwISMkoaeiY2Lx5+QWExfNCABgi4HyVVOJ19Y3NLGzsTByyAFjyJdybKFqh5Nv9qoLqxwvCSqPKZbihNTqSe1PSBzNgAVlGC-Bm-aIrYgJrg+vHm1r8OhK7k3rT+wdgANjOjWe0187TuCxC7kuqmuGzeiW6KT6GUcMAA7ICoaCVLDKuDapCpDdvCDZvCPntkYdUQAOTFEjYvMHzAmPAjQnHrPHbd67JHfFFZACc9KIemKVGyZRimxZDyWHmJTP8PIRn32PyO8CayDZisZpNe+Pl50I4oihCluNuqop-IOv3gCF1CoABsQoAASADeHIAvq7rbLAqyFTLleS+V8HVq4M4XaaVpFpcSqiGTaFXT6ZQGI1t4mrKQKTEA)\r\n\r\n### üíª Code\r\n\r\nConsider this (quite exhaustive) combination:\r\n\r\n```ts\r\ntype T1 = Record<\"a\" | \"b\", number> extends Record<number, string> ? 1 : 2;\r\ntype T2 = Record<number, string> extends Record<\"a\" | \"b\", number> ? 1 : 2;\r\ntype T3 = Record<\"a\" | \"b\", number> extends Record<0 | 1, string> ? 1 : 2;\r\ntype T4 = Record<0 | 1, string> extends Record<\"a\" | \"b\", number> ? 1 : 2;\r\ntype T5 = Record<string, number> extends Record<0 | 1, string> ? 1 : 2;\r\ntype T6 = Record<0 | 1, string> extends Record<string, number> ? 1 : 2;\r\ntype T7 = Record<string, number> extends Record<number, string> ? 1 : 2;\r\ntype T8 = Record<number, string> extends Record<string, number> ? 1 : 2;\r\ntype T9 = Record<\"2\" | \"3\", number> extends Record<number, string> ? 1 : 2;\r\ntype T10 = Record<number, string> extends Record<\"2\" | \"3\", number> ? 1 : 2;\r\ntype T11 = Record<`a ${string}`, number> extends Record<number, string> ? 1 : 2;\r\ntype T12 = Record<\"a\" | \"b\", number> extends Record<`${number}`, string> ? 1 : 2;\r\n```\r\n\r\nOnly `T1`, `T11`, and `T12` are `1`, which makes me think there's some level of unsoundness. Some more [mind twisters](https://www.typescriptlang.org/play?ts=4.7.0-dev.20220430#code/C4TwDgpgBAKgjFAvFAShAxgewE4BMA8ARAIaFQA+UhARoQDRQB2ArgLbUTYB8UEAHsAiNcAZ1QYcBFu04MAlowBmnWLwFDRUEcGwKA5jwD8qgFxMIAN04BuALAAoAPSOorgHqGHoSLABMScSw8IlIKKloGaQ5uNUFhMTQgqTZo+SUVGFiNMSjOI1NzK2w7Jxd3T3tvaBgAZgDEyRCyShp6JhS8rPjAxtzsNOVsVX44zQBvKGJGEDNCYAALfTIAX3zMs0ZLGwdnVygPL3BqgBZ6iWCSZvC2vp4R7J7gvoGMtagNreKdsv2KoA):\r\n\r\n```ts\r\ntype T1 = Record<\"a\" | \"b\", number> extends Record<number, infer T extends string> ? T : never;\r\ntype T2 = Record<\"a\" | \"b\", number> extends Record<number, infer T extends number> ? T : never;\r\ntype T3 = Record<\"a\" | \"b\", number> extends Record<number, infer T extends { any: \"thing\" }> ? T : never;\r\ntype T4 = Record<\"a\" | \"b\", number> extends Record<number, infer T> ? T : never;\r\n```\r\n\r\n### üôÅ Actual behavior\r\n\r\nA mapped type with string literal keys (which aren't `` `${number}` ``) is assignable to a type with number index signature, with disjoint value types.\r\n\r\n### üôÇ Expected behavior\r\n\r\nIt should not be assignable. If `Record<\"a\" | \"b\", number> extends Record<number, string>` because the key types are disjoint, then I'd expect the converse to be true as well, but `Record<number, string>` doesn't extend `Record<\"a\" | \"b\", number>`.","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48906/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48906/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48905","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48905/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48905/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48905/events","html_url":"https://github.com/microsoft/TypeScript/issues/48905","id":1221998353,"node_id":"I_kwDOAT9aAc5I1jcR","number":48905,"title":"Keyword \"as\" for Destructuring Assignment","user":{"login":"Worldwidebrine","id":40757969,"node_id":"MDQ6VXNlcjQwNzU3OTY5","avatar_url":"https://avatars.githubusercontent.com/u/40757969?v=4","gravatar_id":"","url":"https://api.github.com/users/Worldwidebrine","html_url":"https://github.com/Worldwidebrine","followers_url":"https://api.github.com/users/Worldwidebrine/followers","following_url":"https://api.github.com/users/Worldwidebrine/following{/other_user}","gists_url":"https://api.github.com/users/Worldwidebrine/gists{/gist_id}","starred_url":"https://api.github.com/users/Worldwidebrine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Worldwidebrine/subscriptions","organizations_url":"https://api.github.com/users/Worldwidebrine/orgs","repos_url":"https://api.github.com/users/Worldwidebrine/repos","events_url":"https://api.github.com/users/Worldwidebrine/events{/privacy}","received_events_url":"https://api.github.com/users/Worldwidebrine/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-05-01T03:08:22Z","updated_at":"2022-05-01T17:53:03Z","closed_at":"2022-05-01T10:53:25Z","author_association":"NONE","active_lock_reason":null,"body":"# Suggestion\r\n\r\n## üîç Search Terms\r\n\r\ndestructuring assignment as alias :\r\n\r\n## ‚úÖ Viability Checklist\r\n\r\nMy suggestion meets these guidelines:\r\n\r\n* [x] This wouldn't be a breaking change in existing TypeScript/JavaScript code\r\n* [x] This wouldn't change the runtime behavior of existing JavaScript code\r\n* [x] This could be implemented without emitting different JS based on the types of the expressions\r\n* [x] This isn't a runtime feature (e.g. library functionality, non-ECMAScript syntax with JavaScript output, new syntax sugar for JS, etc.)\r\n* [x] This feature would agree with the rest of [TypeScript's Design Goals](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals).\r\n\r\n\r\n## ‚≠ê Suggestion\r\n\r\nAdd `as` as the alias of `:` in destructuring assignment.\r\n\r\n## üìÉ Motivating Example\r\n\r\n`:` is confusing.\r\n```typescript\r\nconst {myProperty: alias} = {myProperty: value};\r\n```\r\nI think `as` should be allowed to replace `:` here and `as` is less confusing.\r\n\r\nThis should be no more than a simple syntax sugar that doesn't break anything, since type casting `as` is only on the right side of an assignment expression and we have already had `as`.\r\n```typescript\r\nimport { old_name as new_name, name as alias } from\r\n```\r\n\r\n## üíª Use Cases\r\n\r\n```typescript\r\nconst {r as x, g as y, b as z} = obj;\r\n```","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48905/reactions","total_count":2,"+1":0,"-1":2,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48905/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48897","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48897/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48897/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48897/events","html_url":"https://github.com/microsoft/TypeScript/issues/48897","id":1221923284,"node_id":"I_kwDOAT9aAc5I1RHU","number":48897,"title":"Type narrowing/assertion fails with ternary operator","user":{"login":"Suyashtnt","id":45307955,"node_id":"MDQ6VXNlcjQ1MzA3OTU1","avatar_url":"https://avatars.githubusercontent.com/u/45307955?v=4","gravatar_id":"","url":"https://api.github.com/users/Suyashtnt","html_url":"https://github.com/Suyashtnt","followers_url":"https://api.github.com/users/Suyashtnt/followers","following_url":"https://api.github.com/users/Suyashtnt/following{/other_user}","gists_url":"https://api.github.com/users/Suyashtnt/gists{/gist_id}","starred_url":"https://api.github.com/users/Suyashtnt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Suyashtnt/subscriptions","organizations_url":"https://api.github.com/users/Suyashtnt/orgs","repos_url":"https://api.github.com/users/Suyashtnt/repos","events_url":"https://api.github.com/users/Suyashtnt/events{/privacy}","received_events_url":"https://api.github.com/users/Suyashtnt/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-04-30T21:17:40Z","updated_at":"2022-05-01T09:27:43Z","closed_at":"2022-05-01T09:27:43Z","author_association":"NONE","active_lock_reason":null,"body":"# Bug Report\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n-->\r\n\r\n### üîé Search Terms\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n-->\r\n- type assertion ternary \r\n- type narrowing ternary \r\n\r\n### üïó Version & Regression Information\r\n\r\n<!-- When did you start seeing this bug occur?\r\n\r\n\"Bugs\" that have existed in TS for a long time are very likely to be FAQs; refer to\r\n  https://github.com/Microsoft/TypeScript/wiki/FAQ#common-bugs-that-arent-bugs\r\n\r\nIf possible, please try testing the nightly version of TS to see if it's already been fixed.\r\nFor npm: `typescript@next`\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n\r\nNote: The TypeScript Playground can be used to try older versions of TypeScript.\r\n\r\nPlease keep and fill in the line that best applies:\r\n-->\r\n- This is the behavior in every version I tried, and I reviewed the FAQ for entries about `4.6.4`, `4.7.0-dev.20220430`\r\n- I was unable to test this on prior versions because it makes no sense why older versions would have this\r\n\r\n### ‚èØ Playground Link\r\n\r\n<!--\r\n  A link to a TypeScript Playground \"Share\" link which shows this behavior\r\n\r\n  The TypeScript Workbench can be used for more complex setups, try\r\n  https://www.typescriptlang.org/dev/bug-workbench/\r\n\r\n  As a last resort, you can link to a repo, but these will be slower for us to investigate.\r\n-->\r\n[Playground link with relevant code](https://www.typescriptlang.org/play?ts=4.6.2#code/KYDwDg9gTgLgBDAnmYcAyEDGBDANsAZzgF44BIAKDjgB84ByAE2HorLvuADsBaAcwBGrCqEiw4mCFwLxcWPIQBc6efgIBtALok46tkxYAafd35CKmiiPDR4k6fAHYCwDDnzK3CoqU69BwvYycACWBF74OgAUcu7AyjJQIVx8tHBcAK64uACUyrEKoUQRhCQAfHAA3lRwUMAwGVBccAVqAHTJmLgZzAQxqqjOKnEEOQDcFAC+VtTUQbKqAMow0Nh8rgM6rcur623rMACSMMAAtlH0rSzjNXNSwVzYAG4hfNgrUCU6jy9vH224bApDJrYATWZwW4Se4LOKeAY+IolfruHZQUElHJQ6gAfhaSw+GIG2LgygyXGYADNksBGLQ6GFkT9Xu9oJiSXjmX82cSIdQyRTgNSuLT6XAnC4SmMgA)\r\n\r\n### üíª Code\r\n\r\n<!-- Please post the relevant code sample here as well-->\r\n```ts\r\nexport type Locales = \t\r\n  | 'de'\r\n\t| 'en-gb'\r\n\r\nexport const locales: Locales[] = [\r\n\t'de',\r\n\t'en-gb'\r\n]\r\n\r\nexport const baseLocale: Locales = 'en-gb'\r\n\r\nconst isLocale = (locale: string | null): locale is Locales => {\r\n  return locales.includes(locale as Locales);\r\n}\r\n\r\n    const localStorageLocale = localStorage.getItem('locale');\r\n    const navigatorLocale = navigator.language;\r\n    \r\n    const locale: Locales = isLocale(localStorageLocale)\r\n      ? localStorageLocale\r\n      : undefined || isLocale(navigatorLocale)\r\n      ? navigatorLocale\r\n      : undefined || baseLocale;\r\n```\r\n\r\n### üôÅ Actual behavior\r\n\r\nTypescript does not correctly narrow the type and says that `Type 'string' is not assignable to type 'Locales'`\r\n\r\n### üôÇ Expected behavior\r\n\r\nIt to correctly narrow down the type without error\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48897/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48897/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48894","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48894/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48894/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48894/events","html_url":"https://github.com/microsoft/TypeScript/issues/48894","id":1221897631,"node_id":"I_kwDOAT9aAc5I1K2f","number":48894,"title":"Create new interfaces to provide asynchronous versions for the user customizeable functions in  `SolutionBuilder` and `SolutionBuilderWithWatchHost`","user":{"login":"craigphicks","id":13205732,"node_id":"MDQ6VXNlcjEzMjA1NzMy","avatar_url":"https://avatars.githubusercontent.com/u/13205732?v=4","gravatar_id":"","url":"https://api.github.com/users/craigphicks","html_url":"https://github.com/craigphicks","followers_url":"https://api.github.com/users/craigphicks/followers","following_url":"https://api.github.com/users/craigphicks/following{/other_user}","gists_url":"https://api.github.com/users/craigphicks/gists{/gist_id}","starred_url":"https://api.github.com/users/craigphicks/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/craigphicks/subscriptions","organizations_url":"https://api.github.com/users/craigphicks/orgs","repos_url":"https://api.github.com/users/craigphicks/repos","events_url":"https://api.github.com/users/craigphicks/events{/privacy}","received_events_url":"https://api.github.com/users/craigphicks/received_events","type":"User","site_admin":false},"labels":[{"id":113971155,"node_id":"MDU6TGFiZWwxMTM5NzExNTU=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75","default":false,"description":"An idea for TypeScript"},{"id":172956911,"node_id":"MDU6TGFiZWwxNzI5NTY5MTE=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf","default":false,"description":"Relates to the public API for TypeScript"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-04-30T18:54:21Z","updated_at":"2022-05-03T00:27:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"# Suggestion\r\n\r\nCreate new interfaces to provide asynchronous versions for the user customizeable functions in  `SolutionBuilder` and `SolutionBuilderWithWatchHost`\r\n\r\n*Spoiler*:  I've written an implementation and test code, and want to submit a pull.\r\n\r\nc.f. pull [implementation and test for SolutionBuilderAsync functionality]#48920 \r\n\r\n## üîç Search Terms\r\n\r\nSolutionBuilder, SolutionBuilderWithWatchHost, asynchronous API \r\n\r\n\r\n## ‚úÖ Viability Checklist\r\n\r\n<!--\r\n   Suggestions that don't meet all these criteria are very, very unlikely to be accepted.\r\n   We always recommend reviewing the TypeScript design goals before investing time writing\r\n   a proposal for ideas outside the scope of the project.\r\n-->\r\nMy suggestion meets these guidelines:\r\n\r\n* [x ] This wouldn't be a breaking change in existing TypeScript/JavaScript code\r\n* [x ] This wouldn't change the runtime behavior of existing JavaScript code\r\n* [x ] This could be implemented without emitting different JS based on the types of the expressions\r\n* [x ] This isn't a runtime feature (e.g. library functionality, non-ECMAScript syntax with JavaScript output, new syntax sugar for JS, etc.)\r\n* [x ] This feature would agree with the rest of [TypeScript's Design Goals](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals).\r\n\r\n\r\n## ‚≠ê Suggestion\r\n\r\nI'm a big fan of using `SolutionBuilder` and `SolutionBuilderWithWatchHost`, the source code for which exists in \r\n`src/compiler/tsbuildPublic.ts`.\r\n\r\nIt allows the following to be overidden and/or defined to inject granular custom user functionality into an incremental, watched build.\r\n\r\n- `afterProgramEmitAndDiagnostics` \r\n  - After individual projects have been verified and emitted \r\n- `afterEmitBundle`\r\n  - Same as `afterProgramEmitAndDiagnostics` but for the case of a single bundle output.\r\n- `createProgram`\r\n  - When a custom emit is desired, \r\n  - or to grab the program for later use with custom transformers (although this a circuitous route, it seems to be the only way)\r\n- `reportErrorSummary`\r\n  - to detect when the solution has settled. \r\n- `getCustomTransformers`\r\n  - applying custom tranforms deep inside the emit process.\r\n\r\nThe suggested feature is to provide asynchronous versions of these interfaces.  \r\n\r\n\r\n## üìÉ Motivating Example\r\n\r\n\r\n\r\n## üíª Use Cases\r\n\r\nWhenever it is desired to write asynchronous code for the above listed functionalites.\r\n\r\nFor example, supposing asynchronous rollup in `afterProgramEmitAndDiagnostics`, where the output is used as input to another project in the solution.\r\n\r\nIn the case of `getCustomTransformers`, suppose a library listed in a config file needs to be loaded at runtime, because it is not known at compile time. \r\nCurrently that means the library must be loaded using `require`, because dynamic `import` is not enabled in synchronous code.\r\nUnfortunately `require` cannot be used to load ESM modules, therefore is only possible to load CommonJS modules,\r\nwhich is an arbitrary constraint.\r\n \r\n## üíª Detailed Proposal\r\n\r\nIn order to understand fully what this proposal would entail, TypeScript 7-dev was cloned and working implementation, and a test module, were written.\r\n\r\nThe new and/or modifed code \r\n- `src/compiler/tsbuildPublicAsync.ts`\r\n  - This is a new source file that parallels it's neighbor `src/compiler/tsbuildPublic.ts`.\r\n  - It borrows a few types from `tsbuildPublic.ts` and has the same dependencies, but is otherwise self contained.\r\n  - `src/compiler/tsbuildPublic.ts` remains completely untouched, as it is already perfect.\r\n- `src/testRunner/unittests/tsbuildWatch/publicApiAsync.ts`\r\n  - It is a new test file to test `src/compiler/tsbuildPublicAsync.ts`\r\n  - It parallels it's neighbor `src/testRunner/unittests/tsbuildWatch/publicApi.ts`, which tests `src/compiler/tsbuildPublic.ts`\r\n- `src/testRunner/unittests/tscWatch/helpers.ts`\r\n  - New code aded to allow the async functionality required to test the new async functionality.\r\n\r\n### Public API\r\n\r\n```\r\nexport type GetCustomTransformersAsync = (\r\n  project: string,\r\n  program?: Program\r\n) => Promise<CustomTransformers | undefined>;\r\nexport interface SolutionBuilderHostBaseAsync<T extends BuilderProgram>\r\n  extends ProgramHost<T> {\r\n  /**\r\n   * CreateProgramHookAsync is just an async wrapper whichs call inner non-async CreateProgram<T>.\r\n   * The purpose is to allow an async hook which can be used to call async user functions before or after non-async CreateProgram\r\n   * The user can override createProgramHookAsync like this:\r\n   * ```\r\n   * host.createProgramHookAsync = async (...args: Parameters<CreateProgram<T>>) => {\r\n   *    // optional user functions here\r\n   *    const p = host.createProgram(...args)\r\n   *    // optional user functions here\r\n   *    return p;\r\n   * }\r\n   * ```\r\n   * Note that this hook is not intended for transforms unless the entire \"emit\" is handled by the user.\r\n   * Generally a \"getCustomTransformsAsync\" hook (member or passed parameter) should be used for transforms.\r\n   * @param ...args: Parameters<CreateProgram<T>>\r\n   * @returns Promise<T>\r\n   */\r\n  createProgramHookAsync(...args: Parameters<CreateProgram<T>>): Promise<T>;\r\n  getCustomTransformersAsync?: GetCustomTransformersAsync;\r\n  afterProgramEmitAndDiagnosticsAsync?(program: T): Promise<void>;\r\n  afterEmitBundleAsync?(config: ParsedCommandLine): Promise<void>;\r\n  ... others member that already existed in SolutionBuilderHostBase\r\n}\r\nexport interface SolutionBuilderHostAsync<T extends BuilderProgram>\r\n  extends SolutionBuilderHostBaseAsync<T> {\r\n  reportErrorSummary?: ReportEmitErrorSummary; // This remains, but solutionSettledAsync can be used instead as \"settled\" callback\r\n}\r\n\r\nexport interface SolutionBuilderWithWatchHostAsync<T extends BuilderProgram>\r\n  extends SolutionBuilderHostBaseAsync<T>,\r\n    WatchHost {\r\n  /**\r\n   * optional solutionSettled callback will be called when the solition has no more projectes to make, just before waiting for watch events.\r\n   * @param totalErrors\r\n   */\r\n  solutionSettledAsync?(totalErrors: number): Promise<void>;\r\n}\r\n\r\nexport interface SolutionBuilderAsync {\r\n  buildAsync(\r\n    project?: string,\r\n    cancellationToken?: CancellationToken,\r\n    writeFile?: WriteFileCallback,\r\n    getCustomTransformersAsync?: GetCustomTransformersAsync\r\n  ): Promise<ExitStatus | undefined>;\r\n  clean(project?: string): ExitStatus;\r\n  buildReferencesAsync(\r\n    project: string,\r\n    cancellationToken?: CancellationToken,\r\n    writeFile?: WriteFileCallback,\r\n    getCustomTransformersAsync?: GetCustomTransformersAsync\r\n  ): Promise<ExitStatus | undefined>;\r\n  cleanReferences(project?: string): ExitStatus;\r\n  /**\r\n   * closeRequest:\r\n   *   - request that async buildAsync/buildReferencesAsync processing terminate, and watches cleared, after any project currently being built is finished.\r\n   *   - In case of non-watch host, this call is a noop.\r\n   */\r\n  closeRequest(): void; // not async\r\n}\r\n```\r\n\r\nNote that unlike `SolutionBuilder.build`, which is a one-shot sets up future timer callbacks,\r\n`SolutionBuilderAsync.buildAsync` is continuous (and asynchronous) control loop which returns if `closeRequest()` is issued. \r\n(If not a watched host, `SolutionBuilderAsync.buildAsync` will return after the inital build).\r\n\r\n\r\n### Methodology used\r\n\r\n- Copied the original `tsbuildPublic.ts`, created the `...Async` interfaces, modifed the callbacks to make them async, and followed the compiler errors \r\nback up to the topmost level, converting each function async along the way.  \r\n- Every async function gets an `...Async` suffix.  This is very helpful in ensuring that no `awaits` are forgotten in the course of mass changes.  (A mising `await` is a horrible thing to debug).\r\n- Change the top level control to an async loop (`buildAsync`) because (perhaps) that is easier to analyze and maintain - both for the coder and the using client.\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48894/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48894/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48900","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48900/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48900/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48900/events","html_url":"https://github.com/microsoft/TypeScript/issues/48900","id":1221927976,"node_id":"I_kwDOAT9aAc5I1SQo","number":48900,"title":"`compilerOptions: noUnusedLocals` doesn't work in `jsconfig.json` in latest typescript","user":{"login":"tjx666","id":41773861,"node_id":"MDQ6VXNlcjQxNzczODYx","avatar_url":"https://avatars.githubusercontent.com/u/41773861?v=4","gravatar_id":"","url":"https://api.github.com/users/tjx666","html_url":"https://github.com/tjx666","followers_url":"https://api.github.com/users/tjx666/followers","following_url":"https://api.github.com/users/tjx666/following{/other_user}","gists_url":"https://api.github.com/users/tjx666/gists{/gist_id}","starred_url":"https://api.github.com/users/tjx666/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tjx666/subscriptions","organizations_url":"https://api.github.com/users/tjx666/orgs","repos_url":"https://api.github.com/users/tjx666/repos","events_url":"https://api.github.com/users/tjx666/events{/privacy}","received_events_url":"https://api.github.com/users/tjx666/received_events","type":"User","site_admin":false},"labels":[{"id":371615203,"node_id":"MDU6TGFiZWwzNzE2MTUyMDM=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Working%20as%20Intended","name":"Working as Intended","color":"fbca04","default":false,"description":"The behavior described is the intended behavior; this is not a bug"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2022-04-30T08:50:34Z","updated_at":"2022-05-03T00:19:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"\r\nDoes this issue occur when all extensions are disabled?: Yes/No\r\n\r\nNo.\r\n\r\n<!-- ü™ì If you answered No above, use 'Help: Start Extension Bisect' from Command Palette to try to identify the cause. -->\r\n<!-- üì£ Issues caused by an extension need to be reported directly to the extension publisher. The 'Help > Report Issue' dialog can assist with this. -->\r\n- MacOS: 12.3.1\r\n- VSCode: 1.67.0-insider\r\n- Typescript: 4.7.20220429\r\n- Node: v16.15.0\r\n\r\n<img width=\"1440\" alt=\"image\" src=\"https://user-images.githubusercontent.com/41773861/166098797-aeff0d2d-883c-419f-8309-4d0f24d629f0.png\">\r\n\r\n@mattbierner\r\n\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48900/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48900/timeline","performed_via_github_app":null,"score":1.0},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48893","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48893/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48893/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48893/events","html_url":"https://github.com/microsoft/TypeScript/issues/48893","id":1221768536,"node_id":"I_kwDOAT9aAc5I0rVY","number":48893,"title":"Type conditional does not narrow down a union type in index signature","user":{"login":"hlysine","id":25472513,"node_id":"MDQ6VXNlcjI1NDcyNTEz","avatar_url":"https://avatars.githubusercontent.com/u/25472513?v=4","gravatar_id":"","url":"https://api.github.com/users/hlysine","html_url":"https://github.com/hlysine","followers_url":"https://api.github.com/users/hlysine/followers","following_url":"https://api.github.com/users/hlysine/following{/other_user}","gists_url":"https://api.github.com/users/hlysine/gists{/gist_id}","starred_url":"https://api.github.com/users/hlysine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hlysine/subscriptions","organizations_url":"https://api.github.com/users/hlysine/orgs","repos_url":"https://api.github.com/users/hlysine/repos","events_url":"https://api.github.com/users/hlysine/events{/privacy}","received_events_url":"https://api.github.com/users/hlysine/received_events","type":"User","site_admin":false},"labels":[{"id":113971226,"node_id":"MDU6TGFiZWwxMTM5NzEyMjY=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7","default":false,"description":"An existing issue was already created"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-04-30T07:44:49Z","updated_at":"2022-05-03T00:16:16Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"# Bug Report\r\n\r\n<!--\r\n  Please fill in each section completely. Thank you!\r\n-->\r\n\r\n### üîé Search Terms\r\n\r\nconditional in type with index signature\r\n\r\n### üïó Version & Regression Information\r\n\r\n<!-- When did you start seeing this bug occur?\r\n\r\n\"Bugs\" that have existed in TS for a long time are very likely to be FAQs; refer to\r\n  https://github.com/Microsoft/TypeScript/wiki/FAQ#common-bugs-that-arent-bugs\r\n\r\nIf possible, please try testing the nightly version of TS to see if it's already been fixed.\r\nFor npm: `typescript@next`\r\nThis is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly\r\n\r\nNote: The TypeScript Playground can be used to try older versions of TypeScript.\r\n\r\nPlease keep and fill in the line that best applies:\r\n-->\r\nTested versions:\r\n- 4.6.2\r\n- 4.3.5\r\n- Nightly (4.7.0-dev.20220429)\r\n\r\nThis is the behavior in every version I tried, and I reviewed the FAQ for entries about index signatures and conditional types\r\n\r\n### ‚èØ Playground Link\r\n\r\n<!--\r\n  A link to a TypeScript Playground \"Share\" link which shows this behavior\r\n\r\n  The TypeScript Workbench can be used for more complex setups, try\r\n  https://www.typescriptlang.org/dev/bug-workbench/\r\n\r\n  As a last resort, you can link to a repo, but these will be slower for us to investigate.\r\n-->\r\n[Playground link with relevant code](https://www.staging-typescript.org/play?ts=4.6.2#code/C4TwDgpgBAkgdgEwgDwgg8gIwFZQLxQDeAUFFANoDWEIAXFAM7ABOAlnAOYC69cArgFtMEZlAA+jFuw4BuYgF9ixUJCgBlABYB7PgBsEAIQhqpnADwAVKCmAREDSW04A+fFAtzl4aAGENEAGNqZktrZFt7WEQUNCxsVwISMnIAaSh2KGoQLQAzdx53VK4wiIQHfiERKAB+QpTi+k0dfSMTJw5LIuc5eSA)\r\n\r\n### üíª Code\r\n\r\n<!-- Please post the relevant code sample here as well-->\r\n```ts\r\ntype IndexedObj = {\r\n  [key: string]: number | string;\r\n}\r\n\r\ntype ShouldBeString<T extends string> = T;\r\n\r\ntype Checker<T extends IndexedObj> = {\r\n  [K in keyof T]: T[K] extends number ? T[K] : ShouldBeString<T[K]>;\r\n}\r\n```\r\n\r\n### üôÅ Actual behavior\r\n\r\n<!-- What happened, and why it was wrong -->\r\nError: `Type 'T[K]' does not satisfy the constraint 'string'.`\r\n\r\n### üôÇ Expected behavior\r\n\r\n<!-- What you expected to happen instead, and why -->\r\nI don't expect there to be any errors. Since `IndexedObj` defines an index signature with values of type `number | string`, and `T[K] extends number` eliminates the `number` option, `T[K]` should be of type `string`, passing the `ShouldBeString` check.\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48893/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48893/timeline","performed_via_github_app":null,"score":1.0}]}